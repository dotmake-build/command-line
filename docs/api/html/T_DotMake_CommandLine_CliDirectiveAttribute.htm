<!DOCTYPE html []><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>CliDirectiveAttribute Class</title><meta name="Title" content="CliDirectiveAttribute" /><meta name="Help.Id" content="T:DotMake.CommandLine.CliDirectiveAttribute" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="DotMake.CommandLine" /><meta name="guid" content="T_DotMake_CommandLine_CliDirectiveAttribute" /><meta name="Description" content="Specifies a class property that represents a directive which is a syntactic element, that is used on the command line." /><meta name="tocFile" content="../toc/IDAA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img style="height: 64px;" src="../icons/logo128.png" /></div><div id="DocumentationTitle" class="level-item">DotMake Command-Line Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Cli<wbr />Directive<wbr />Attribute Class</h1><div class="summary">
            Specifies a class property that represents a directive which is a syntactic element, that is used on the command line.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">[CliDirective]
public bool SomeCliDirective { get; set; }</code></pre></div></div><p>Currently only <span class="code">bool</span>, <span class="code">string</span> and <span class="code">string[]</span> types are supported for <span class="code">[CliDirective]</span> properties.</p><p><b>Directives:</b><span class="code">System.CommandLine</span> introduces a syntactic element called a directive. The <span class="code">[diagram]</span> directive is an example.
            When you include <span class="code">[diagram]</span> after the app's name, <span class="code">System.CommandLine</span> displays a diagram of the parse result instead of
            invoking the command-line app:
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">console</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-console">dotnet [diagram] build --no-restore --output ./build-output/
       ^-------^</code></pre></div></div>
            Output:
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">console</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-console">[ dotnet [ build [ --no-restore &lt;True&gt; ] [ --output &lt;./build-output/&gt; ] ] ]</code></pre></div></div>
            The purpose of directives is to provide cross-cutting functionality that can apply across command-line apps.
            Because directives are syntactically distinct from the app's own syntax, they can provide functionality that applies across apps.
            </p><p>
            A directive must conform to the following syntax rules:
            <ul><li>It's a token on the command line that comes after the app's name but before any subcommands or options.</li><li>It's enclosed in square brackets.</li><li>It doesn't contain spaces.</li></ul></p><p>An unrecognized directive is ignored without causing a parsing error.</p><p>
            A directive can include an argument, separated from the directive name by a colon (<span class="code">:</span>):
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">console</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-console">myapp [directive:value]</code></pre></div></div><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">console</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-console">myapp [directive:value1] [directive:value2]</code></pre></div></div></p><p>The following directives are built in (can be enabled/disabled via <a href="T_DotMake_CommandLine_CliSettings.htm">CliSettings</a>): <span class="code">[diagram]</span>, <span class="code">[suggest]</span>, <span class="code">[env]</span></p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="N_DotMake_CommandLine.htm">DotMake.CommandLine</a><br /><strong>Assembly:</strong> DotMake.CommandLine (in DotMake.CommandLine.dll) Version: 2.5.5<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">CliDirectiveAttribute</span> : <span class="identifier">Attribute</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <a href="https://learn.microsoft.com/dotnet/api/system.attribute" target="_blank" rel="noopener noreferrer">Attribute</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">CliDirectiveAttribute</span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Example</h2><div id="IDBCSection"><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// A root cli command to test directives
// Currently only `bool`, `string` and `string[]` types are supported for `[CliDirective]` properties.

[CliCommand(Description = "A root cli command with directives")]
public class DirectiveCliCommand
{
    [CliDirective]
    public bool Debug { get; set; }

    [CliDirective]
    public string Directive2 { get; set; }

    [CliDirective]
    public string[] Vars { get; set; }

    public void Run(CliContext context)
    {
        if (context.IsEmpty())
            context.ShowHelp();
        else
        {
            Console.WriteLine($"Directive '{nameof(Debug)}' = {StringExtensions.FormatValue(Debug)}");
            Console.WriteLine($"Directive '{nameof(Directive2)}' = {StringExtensions.FormatValue(Directive2)}");
            Console.WriteLine($"Directive '{nameof(Vars)}' = {StringExtensions.FormatValue(Vars)}");
        }
    }
}</code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Constructors</h2><div id="IDAEASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="M_DotMake_CommandLine_CliDirectiveAttribute__ctor.htm">CliDirectiveAttribute</a></td><td>Initializes a new instance of the <span class="selflink">CliDirectiveAttribute</span> class</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDBEASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="P_DotMake_CommandLine_CliDirectiveAttribute_Description.htm">Description</a></td><td>
            Gets or sets the description of the directive. This will be displayed in usage help of the command line application.
            <p>This is not used for directives currently, but it's reserved for future use.</p></td></tr><tr><td><a href="P_DotMake_CommandLine_CliDirectiveAttribute_Hidden.htm">Hidden</a></td><td>
            Gets or sets a value indicating whether the directive is hidden.
            <p>
            You might want to support a command, option, or argument, but avoid making it easy to discover.
            For example, it might be a deprecated or administrative or preview feature.
            Use the <a href="P_DotMake_CommandLine_CliDirectiveAttribute_Hidden.htm">Hidden</a> property to prevent users from discovering such features by using tab completion or help.
            </p><p>This is not used for directives currently, but it's reserved for future use.</p></td></tr><tr><td><a href="P_DotMake_CommandLine_CliDirectiveAttribute_Name.htm">Name</a></td><td>
            Gets or sets the name of the directive that will be used on the command line to specify the directive.
            <p>
            If not set (or is empty/whitespace), the name of the property that this attribute is applied to, will be used to generate directive name automatically:
            These suffixes will be stripped from the property name: <span class="code">RootCliCommandDirective, RootCommandDirective, SubCliCommandDirective, SubCommandDirective, CliCommandDirective, CommandDirective, CliDirective, Directive</span>.
            Then the name will be converted to kebab-case, for example:
            <ul><li>If property name is <span class="code">Debug</span> or <span class="code">DebugDirective</span> or <span class="code">DebugCliDirective</span> -&gt; directive name will be <span class="code">debug</span></li><li>If property name is <span class="code">NoRestore</span> or <span class="code">NoRestoreDirective</span> or <span class="code">NoRestoreCliDirective</span> -&gt; directive name will be <span class="code">no-restore</span></li></ul></p><p>Default conventions can be changed via parent command's <a href="P_DotMake_CommandLine_CliCommandAttribute_NameCasingConvention.htm">NameCasingConvention</a> and <a href="P_DotMake_CommandLine_CliCommandAttribute_NamePrefixConvention.htm">NamePrefixConvention</a> properties.</p></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="N_DotMake_CommandLine.htm">DotMake.CommandLine Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Example</a></li><li><a class="quickLink">Constructors</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div id="FooterContent" class="column"><p>Copyright © 2023-2025 DotMake</p> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>