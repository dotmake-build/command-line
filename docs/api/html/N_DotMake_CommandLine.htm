<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>DotMake.CommandLine Namespace</title><meta name="Title" content="DotMake.CommandLine" /><meta name="Help.Id" content="N:DotMake.CommandLine" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="DotMake.CommandLine" /><meta name="guid" content="N_DotMake_CommandLine" /><meta name="Description" content="This is the root namespace of this library, it includes the CLI attributes and CLI parser/runner." /><meta name="tocFile" content="../toc/IDA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img style="height: 64px;" src="../icons/logo128.png" /></div><div id="DocumentationTitle" class="level-item">DotMake Command-Line Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Dot<wbr />Make.<wbr />Command<wbr />Line Namespace</h1><div class="summary">
            This is the root namespace of this library, it includes the CLI attributes and CLI parser/runner.
            <p /><p>The main classes in this namespace are:</p><ul><li><a href="T_DotMake_CommandLine_CliCommandAttribute.htm">CliCommandAttribute</a> is the attribute which specifies a class that represents a command which is a specific action that the command line application performs.</li><li><a href="T_DotMake_CommandLine_CliOptionAttribute.htm">CliOptionAttribute</a> is the attribute which specifies a class property that represents an option which is a named parameter and a value for that parameter, that is used on the command line.</li><li><a href="T_DotMake_CommandLine_CliArgumentAttribute.htm">CliArgumentAttribute</a> is the attribute which specifies a class property that represents an argument which is a value that can be passed on the command line to a command or an option.</li><li><a href="T_DotMake_CommandLine_Cli.htm">Cli</a> is the class which provides methods for parsing command line input and running an indicated command.</li></ul></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Classes</h2><div id="IDACASection"><table id="classList" class="table is-hoverable"><tr><td><a href="T_DotMake_CommandLine_Cli.htm">Cli</a></td><td>
            Provides methods for parsing command line input and running an indicated command.
            </td></tr><tr><td><a href="T_DotMake_CommandLine_CliArgumentAttribute.htm">CliArgumentAttribute</a></td><td>
            Specifies a class property that represents an argument which is a value that can be passed on the command line to a command or an option.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">[CliArgument]
public string SomeCliArgument { get; set; }</code></pre></div></div><p>
            Note that an argument is required if the decorated property does not have a default value (set via a property initializer),
            see <a href="P_DotMake_CommandLine_CliArgumentAttribute_Required.htm">Required</a> property for details.
            </p><p><b>Arguments:</b> An argument is a value passed to an option or a command. The following examples show an argument for the <span class="code">verbosity</span> option and an argument for the <span class="code">build</span> command.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">console</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-console">dotnet tool update dotnet-suggest --verbosity quiet --global
                                              ^---^</code></pre></div></div><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">console</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-console">dotnet build myapp.csproj
             ^----------^</code></pre></div></div>
            Arguments can have default values that apply if no argument is explicitly provided. For example, many options are implicitly Boolean parameters with a default of <span class="code">true</span> when the option name is in the command line.
            </p></td></tr><tr><td><a href="T_DotMake_CommandLine_CliCommandAsDelegate.htm">CliCommandAsDelegate</a></td><td>
            Represents a definition class generated by the source generator for a command as delegate.
            </td></tr><tr><td><a href="T_DotMake_CommandLine_CliCommandAttribute.htm">CliCommandAttribute</a></td><td>
            Specifies a class that represents a command which is a specific action that the command line application performs.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">[CliCommand]
public class SomeCliCommand</code></pre></div></div>
            The class that this attribute is applied to, 
            <ul><li>will be a root command if the class is not a nested class and <a href="P_DotMake_CommandLine_CliCommandAttribute_Parent.htm">Parent</a> property is not set.</li><li>will be a sub command if the class is a nested class or <a href="P_DotMake_CommandLine_CliCommandAttribute_Parent.htm">Parent</a> property is set.</li></ul><p><b>Commands:</b> A command in command-line input is a token that specifies an action or defines a group of related actions. For example:
            <ul><li>In <span class="code">dotnet run</span>, <span class="code">run</span> is a command that specifies an action.</li><li>In <span class="code">dotnet tool install</span>, <span class="code">install</span> is a command that specifies an action, and <span class="code">tool</span> is a command that specifies a <br />
                    group of related commands. There are other tool-related commands, such as <span class="code">tool uninstall</span>, <span class="code">tool list</span>,<br />
                    and <span class="code">tool update</span>.</li></ul></p><p><b>Root commands:</b> The root command is the one that specifies the name of the app's executable. For example, the <span class="code">dotnet</span> command specifies the <span class="code">dotnet.exe</span> executable.
            </p><p><b>Subcommands:</b> Most command-line apps support subcommands, also known as verbs. For example, the <span class="code">dotnet</span> command has a <span class="code">run</span> subcommand that you invoke by entering <span class="code">dotnet run</span>.
            Subcommands can have their own subcommands. In <span class="code">dotnet tool install</span>, <span class="code">install</span> is a <span class="code">subcommand</span> of tool.
            </p><p>
            When you have repeating/common options and arguments for your commands, you can define them once in a base class and then 
            share them by inheriting that base class in other command classes.Interfaces are also supported !
            </p></td></tr><tr><td><a href="T_DotMake_CommandLine_CliCommandBuilder.htm">CliCommandBuilder</a></td><td>
            Represents a command builder generated by the source generator.
            </td></tr><tr><td><a href="T_DotMake_CommandLine_CliContext.htm">CliContext</a></td><td>
            Supports command invocation by providing access to parse results and other services.
            </td></tr><tr><td><a href="T_DotMake_CommandLine_CliExtensions.htm">CliExtensions</a></td><td>
            Provides extension methods for <a href="T_DotMake_CommandLine_Cli.htm">Cli</a>. These are usually automatically generated by the source generator
            when current project supports a specific feature through a dependency,
            e.g. when you add package <span class="code">Microsoft.Extensions.DependencyInjection</span>, dependency injection related extension
            methods will be available here. 
            </td></tr><tr><td><a href="T_DotMake_CommandLine_CliHelpBuilder.htm">CliHelpBuilder</a></td><td>
            Formats output to be shown to users to describe how to use a command line tool.
            <p><a href="https://learn.microsoft.com/dotnet/api/system.commandline.help.helpbuilder" target="_blank" rel="noopener noreferrer">HelpBuilder</a> is weirdly designed, i.e. it's hard to derive from that class due to static methods.
            <a href="T_DotMake_CommandLine_CliHelpBuilder.htm">CliHelpBuilder</a> solves this problem by providing overridable methods, and it also adds color support.
            </p></td></tr><tr><td><a href="T_DotMake_CommandLine_CliHelpBuilder_Default.htm">CliHelpBuilder<span id="LST1460D062_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Default</a></td><td>
            Provides default formatting for help output.
            </td></tr><tr><td><a href="T_DotMake_CommandLine_CliOptionAttribute.htm">CliOptionAttribute</a></td><td>
            Specifies a class property that represents an option which is a named parameter and a value for that parameter, that is used on the command line.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">[CliOption]
public string SomeCliOption { get; set; }</code></pre></div></div><p>
            Note that an option is required if the decorated property does not have a default value (set via a property initializer),
            see <a href="P_DotMake_CommandLine_CliOptionAttribute_Required.htm">Required</a> property for details.
            </p><p><b>Options:</b> An option is a named parameter that can be passed to a command. The POSIX convention is to prefix the option name with two hyphens (<span class="code">--</span>).
            The following example shows two options:
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">console</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-console">dotnet tool update dotnet-suggest --verbosity quiet --global
                                  ^---------^       ^------^</code></pre></div></div>
            As this example illustrates, the value of the option may be explicit (<span class="code">quiet</span> for <span class="code">--verbosity</span>) or implicit (nothing follows <span class="code">--global</span>).
            Options that have no value specified are typically Boolean parameters that default to <span class="code">true</span> if the option is specified on the command line.
            </p><p>
            For some Windows command-line apps, you identify an option by using a leading slash (<span class="code">/</span>) with the option name. For example:
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">console</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-console">msbuild /version
        ^------^</code></pre></div></div>
            Both POSIX and Windows prefix conventions are supported. When you configure an option, you specify the option name including the prefix.
            </p></td></tr><tr><td><a href="T_DotMake_CommandLine_CliSettings.htm">CliSettings</a></td><td>
            Represents the settings used by the <a href="T_DotMake_CommandLine_Cli.htm">Cli</a>.
            </td></tr><tr><td><a href="T_DotMake_CommandLine_CliValidationExtensions.htm">CliValidationExtensions</a></td><td>
            Provides extension methods related to validation for <span class="noLink">CliArgument</span> and <span class="noLink">CliOption</span>. 
            </td></tr><tr><td><a href="T_DotMake_CommandLine_StringExtensions.htm">StringExtensions</a></td><td>
            Provides extension methods for <a href="https://docs.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a>.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Enumerations</h2><div id="IDJCASection"><table id="enumerationList" class="table is-hoverable"><tr><td><a href="T_DotMake_CommandLine_CliArgumentArity.htm">CliArgumentArity</a></td><td>
            Defines the arity of an option or argument. The arity refers to the number of values that can be passed on the command line.
            </td></tr><tr><td><a href="T_DotMake_CommandLine_CliNameCasingConvention.htm">CliNameCasingConvention</a></td><td>
            Defines the character casing conventions to use for command, option and argument names.
            </td></tr><tr><td><a href="T_DotMake_CommandLine_CliNamePrefixConvention.htm">CliNamePrefixConvention</a></td><td>
            Defines the prefix conventions to use for option names and aliases.
            </td></tr><tr><td><a href="T_DotMake_CommandLine_CliValidationRules.htm">CliValidationRules</a></td><td>
            Defines validation rules for a CLI argument and a CLI option's argument.
            </td></tr></table></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Classes</a></li><li><a class="quickLink">Enumerations</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"><p>Copyright © 2023-2024 DotMake</p> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>