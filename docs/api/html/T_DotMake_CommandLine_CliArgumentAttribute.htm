<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>CliArgumentAttribute Class</title><meta name="Title" content="CliArgumentAttribute" /><meta name="Help.Id" content="T:DotMake.CommandLine.CliArgumentAttribute" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="DotMake.CommandLine" /><meta name="guid" content="T_DotMake_CommandLine_CliArgumentAttribute" /><meta name="Description" content="Specifies a class property that represents an argument which is a value that can be passed on the command line to a command or an option." /><meta name="tocFile" content="../toc/IDAA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img style="height: 64px;" src="../icons/logo128.png" /></div><div id="DocumentationTitle" class="level-item">DotMake Command-Line Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Cli<wbr />Argument<wbr />Attribute Class</h1><div class="summary">
            Specifies a class property that represents an argument which is a value that can be passed on the command line to a command or an option.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">[CliArgument]
public string SomeCliArgument { get; set; }</code></pre></div></div><p>
            Note that an argument is required if the decorated property does not have a default value (set via a property initializer),
            see <a href="P_DotMake_CommandLine_CliArgumentAttribute_Required.htm">Required</a> property for details.
            </p><p><b>Arguments:</b> An argument is a value passed to an option or a command. The following examples show an argument for the <span class="code">verbosity</span> option and an argument for the <span class="code">build</span> command.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">console</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-console">dotnet tool update dotnet-suggest --verbosity quiet --global
                                              ^---^</code></pre></div></div><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">console</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-console">dotnet build myapp.csproj
             ^----------^</code></pre></div></div>
            Arguments can have default values that apply if no argument is explicitly provided. For example, many options are implicitly Boolean parameters with a default of <span class="code">true</span> when the option name is in the command line.
            </p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="N_DotMake_CommandLine.htm">DotMake.CommandLine</a><br /><strong>Assembly:</strong> DotMake.CommandLine (in DotMake.CommandLine.dll) Version: 2.0.0<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">CliArgumentAttribute</span> : <span class="identifier">Attribute</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <a href="https://learn.microsoft.com/dotnet/api/system.attribute" target="_blank" rel="noopener noreferrer">Attribute</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">CliArgumentAttribute</span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Example</h2><div id="IDBCSection"><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">//Delegate-based model
//In Program.cs, add this simple code:
Cli.Run(([CliArgument] string argument1, bool option1) =&gt;
{
    Console.WriteLine($@"Value for {nameof(argument1)} parameter is '{argument1}'");
    Console.WriteLine($@"Value for {nameof(option1)} parameter is '{option1}'");
});

//Or:
Cli.Run(Method);

void Method([CliArgument] string argument2, bool option2)
{
    Console.WriteLine($@"Value for {nameof(argument2)} parameter is '{argument2}'");
    Console.WriteLine($@"Value for {nameof(option2)} parameter is '{option2}'");
}</code></pre></div></div><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// Class-based model
// Create a simple class like this:

[CliCommand(Description = "A root cli command")]
public class RootCliCommand
{
    [CliOption(Description = "Description for Option1")]
    public string Option1 { get; set; } = "DefaultForOption1";

    [CliArgument(Description = "Description for Argument1")]
    public string Argument1 { get; set; }

    public void Run()
    {
        Console.WriteLine($@"Handler for '{GetType().FullName}' is run:");
        Console.WriteLine($@"Value for {nameof(Option1)} property is '{Option1}'");
        Console.WriteLine($@"Value for {nameof(Argument1)} property is '{Argument1}'");
        Console.WriteLine();
    }
}

        //In Program.cs, add this single line:
        Cli.Run&lt;RootCliCommand&gt;(args);

        //If you need to simply parse the command-line arguments without invocation, use this:
        var parseResult = Cli.Parse&lt;RootCliCommand&gt;(args);
        var rootCliCommand = parseResult.Bind&lt;RootCliCommand&gt;();</code></pre></div></div><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// A root cli command which shows help if command is empty, i.e. no arguments or options are passed.
// Arguments and options should be optional, if they are required (no default values),
// then handler will not run and missing error message will be shown.

[CliCommand(Description = "A root cli command")]
public class RootHelpOnEmptyCliCommand
{
    [CliOption(Description = "Description for Option1")]
    public string Option1 { get; set; } = "DefaultForOption1";

    [CliArgument(Description = "Description for Argument1")]
    public string Argument1 { get; set; } = "DefaultForArgument1";

    public void Run(CliContext context)
    {
        if (context.IsEmptyCommand())
            context.ShowHelp();
        else
            context.ShowValues();
    }
}</code></pre></div></div><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// Sub-commands can get a reference to the parent command by adding a property of the parent command type.

[CliCommand(Description = "A root cli command with children that can access parent commands")]
public class ParentCommandAccessorCliCommand
{
    [CliOption(
        Description = "This is a global option (Recursive option on the root command), it can appear anywhere on the command line",
        Recursive = true)]
    public string GlobalOption1 { get; set; } = "DefaultForGlobalOption1";

    [CliArgument(Description = "Description for RootArgument1")]
    public string RootArgument1 { get; set; }

    public void Run(CliContext context)
    {
        context.ShowValues();
    }

    [CliCommand(Description = "A nested level 1 sub-command which accesses the root command")]
    public class Level1SubCliCommand
    {
        [CliOption(
            Description = "This is global for all sub commands (it can appear anywhere after the level-1 verb)",
            Recursive = true)]
        public string Level1RecursiveOption1 { get; set; } = "DefaultForLevel1RecusiveOption1";

        [CliArgument(Description = "Description for Argument1")]
        public string Argument1 { get; set; }

        // The parent command gets automatically injected
        public ParentCommandAccessorCliCommand RootCommand { get; set; }

        public void Run(CliContext context)
        {
            context.ShowValues();
        }

        [CliCommand(Description = "A nested level 2 sub-command which accesses its parent commands")]
        public class Level2SubCliCommand
        {
            [CliOption(Description = "Description for Option1")]
            public string Option1 { get; set; } = "DefaultForOption1";

            [CliArgument(Description = "Description for Argument1")]
            public string Argument1 { get; set; }

            // All ancestor commands gets injected
            public ParentCommandAccessorCliCommand RootCommand { get; set; }
            public Level1SubCliCommand ParentCommand { get; set; }

            public void Run(CliContext context)
            {
                context.ShowValues();

                Console.WriteLine();
                Console.WriteLine(@$"Level1RecursiveOption1 = {ParentCommand.Level1RecursiveOption1}");
                Console.WriteLine(@$"parent Argument1 = {ParentCommand.Argument1}");
                Console.WriteLine(@$"GlobalOption1 = {RootCommand.GlobalOption1}");
                Console.WriteLine(@$"RootArgument1 = {RootCommand.RootArgument1}");
            }
        }
    }
}</code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Constructors</h2><div id="IDAEASection"><table id="ConstructorList" class="table is-hoverable"><tr><td><a href="M_DotMake_CommandLine_CliArgumentAttribute__ctor.htm">CliArgumentAttribute</a></td><td>Initializes a new instance of the <span class="selflink">CliArgumentAttribute</span> class</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDBEASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="P_DotMake_CommandLine_CliArgumentAttribute_AllowedValues.htm">AllowedValues</a></td><td>
            Gets or sets the list of allowed values for an argument.
            <p>Configures an argument to accept only the specified values, and to suggest them as command line completions.</p><p>Note that if the argument type is an enum, values are automatically added.</p></td></tr><tr><td><a href="P_DotMake_CommandLine_CliArgumentAttribute_Arity.htm">Arity</a></td><td>
            Gets or sets the arity of the argument. The arity refers to the number of values that can be passed on the command line.
            <p>In most cases setting argument arity is not necessary as it is automatically determined based on the argument type (the decorated property's type):</p><ul><li>Boolean -&gt; ArgumentArity.ZeroOrOne</li><li>Collection types -&gt; ArgumentArity.ZeroOrMore</li><li>Everything else -&gt; ArgumentArity.ExactlyOne</li></ul></td></tr><tr><td><a href="P_DotMake_CommandLine_CliArgumentAttribute_Description.htm">Description</a></td><td>
            Gets or sets the description of the argument. This will be displayed in usage help of the command line application.
            </td></tr><tr><td><a href="P_DotMake_CommandLine_CliArgumentAttribute_HelpName.htm">HelpName</a></td><td>
            Gets or sets the name of the argument when displayed in help.
            </td></tr><tr><td><a href="P_DotMake_CommandLine_CliArgumentAttribute_Hidden.htm">Hidden</a></td><td>
            Gets or sets a value indicating whether the argument is hidden.
            <p>
            You might want to support a command, option, or argument, but avoid making it easy to discover.
            For example, it might be a deprecated or administrative or preview feature.
            Use the <a href="P_DotMake_CommandLine_CliArgumentAttribute_Hidden.htm">Hidden</a> property to prevent users from discovering such features by using tab completion or help.
            </p></td></tr><tr><td><a href="P_DotMake_CommandLine_CliArgumentAttribute_Name.htm">Name</a></td><td>
            Gets or sets the name of the argument that will be used mainly for displaying in usage help of the command line application.
            <p>
            If not set (or is empty/whitespace), the name of the property that this attribute is applied to, will be used to generate argument name automatically:
            These suffixes will be stripped from the property name: <span class="code">RootCliCommandArgument, RootCommandArgument, SubCliCommandArgument, SubCommandArgument, CliCommandArgument, CommandArgument, CliArgument, Argument</span>.
            Then the name will be converted to kebab-case, for example:
            <ul><li>If property name is <span class="code">Output</span> or <span class="code">OutputArgument</span> or <span class="code">OutputCliArgument</span> -&gt; argument name will be <span class="code">output</span></li><li>If property name is <span class="code">ProjectPath</span> or <span class="code">ProjectPathArgument</span> or <span class="code">ProjectPathCliArgument</span> -&gt; argument name will be <span class="code">project-path</span></li></ul></p><p>Default convention can be changed via parent command's <a href="P_DotMake_CommandLine_CliCommandAttribute_NameCasingConvention.htm">NameCasingConvention</a> property.</p></td></tr><tr><td><a href="P_DotMake_CommandLine_CliArgumentAttribute_Required.htm">Required</a></td><td>
            Gets or sets a value indicating whether the argument is required when its parent command is invoked.
            Default is auto-detected.
            <p>
            An option/argument will be considered required when
            <ul><li>
                    There is no property initializer and the property type is a reference type (e.g. <span class="code">public string Arg { get; set; }</span>). 
                    <span class="code">string</span> is a reference type which has a null as the default value but <span class="code">bool</span> and <span class="code">enum</span> are value
                    types which already have non-null default values. <span class="code">Nullable&lt;T&gt;</span> is a reference type, e.g. <span class="code">bool?</span>.
                </li><li>
                    There is a property initializer, but it's initialized with <span class="code">null</span> or <span class="code">null!</span> (SuppressNullableWarningExpression)
                    (e.g. <span class="code">public string Arg { get; set; } = null!;</span>).
                </li><li>If it's forced via attribute property <span class="code">Required</span> (e.g. <span class="code">[CliArgument(Required = true)]</span>).</li><li>
                    If it's forced via <span class="code">required</span> modifier (e.g. <span class="code">public required string Opt { get; set; }</span>).
                    Note that for being able to use <span class="code">required</span> modifier, if your target framework is below net7.0, 
                    you also need <span class="code">&lt;LangVersion&gt;11.0&lt;/LangVersion&gt;</span> tag (minimum) in your .csproj file (our source generator supplies the polyfills
                    automatically as long as you set C# language version to 11).
                </li></ul></p><p>
            An option/argument will be considered optional when
            <ul><li>
                    There is no property initializer (e.g. <span class="code">public bool Opt { get; set; }</span>) but the property type is a value type 
                    which already have non-null default value.
                </li><li>
                    There is a property initializer, and it's not initialized with <span class="code">null</span> or <span class="code">null!</span> (SuppressNullableWarningExpression)
                    (e.g. <span class="code">public string Arg { get; set; } = "Default";</span>).
                </li><li>If it's forced via attribute property <span class="code">Required</span> (e.g. <span class="code">[CliArgument(Required = false)]</span>).</li></ul></p><p>
            When an argument is required, the argument has to be specified on the command line and if its parent command is invoked
            without it, an error message is displayed and the command handler isn't called.
            When an argument is not required, the argument doesn't have to be specified on the command line, the default value provides the argument value.
            </p></td></tr><tr><td><a href="P_DotMake_CommandLine_CliArgumentAttribute_ValidationMessage.htm">ValidationMessage</a></td><td>Gets or sets an error message to show when <a href="P_DotMake_CommandLine_CliArgumentAttribute_ValidationPattern.htm">ValidationPattern</a> does not match and validation fails.</td></tr><tr><td><a href="P_DotMake_CommandLine_CliArgumentAttribute_ValidationPattern.htm">ValidationPattern</a></td><td>
            Gets or sets a regular expression pattern used to determine if argument value(s) is valid.
            <p>
            Note that you can specify regular expression options inline in the pattern with the syntax <span class="code">(?imnsx-imnsx)</span>:
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ValidationPattern = @"(?i)^[a-z]+$"</code></pre></div></div><a href="https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference" target="_blank" rel="noopener noreferrer">Regular expression quick reference</a><br /><a href="https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-options" target="_blank" rel="noopener noreferrer">Regular expression options</a></p></td></tr><tr><td><a href="P_DotMake_CommandLine_CliArgumentAttribute_ValidationRules.htm">ValidationRules</a></td><td>
            Gets or sets a set of validation rules used to determine if argument value(s) is valid.
            <p>
            When combining validation rules, use bitwise 'or' operator(| in C#):
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ValidationRules = CliValidationRules.NonExistingFile | CliValidationRules.LegalPath</code></pre></div></div></p></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="N_DotMake_CommandLine.htm">DotMake.CommandLine Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Example</a></li><li><a class="quickLink">Constructors</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div id="FooterContent" class="column"><p>Copyright © 2023-2025 DotMake</p> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>