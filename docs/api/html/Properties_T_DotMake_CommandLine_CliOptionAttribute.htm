<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>CliOptionAttribute Properties</title><meta name="Title" content="Properties" /><meta name="Help.Id" content="Properties.T:DotMake.CommandLine.CliOptionAttribute" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="DotMake.CommandLine" /><meta name="guid" content="Properties_T_DotMake_CommandLine_CliOptionAttribute" /><meta name="tocFile" content="../toc/IDKAA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img style="height: 64px;" src="../icons/logo128.png" /></div><div id="DocumentationTitle" class="level-item">DotMake Command-Line Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Cli<wbr />Option<wbr />Attribute Properties</h1><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDADASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="P_DotMake_CommandLine_CliOptionAttribute_Aliases.htm">Aliases</a></td><td>
            Gets or sets the set of alternative strings that can be used on the command line to specify the option.
            <p>The aliases will be also displayed in usage help of the command line application.</p><p>
            When manually setting an alias, you should specify the option name including the prefix
            (e.g. <span class="code">--option</span>, <span class="code">-option</span> or <span class="code">/option</span>)
            </p></td></tr><tr><td><a href="P_DotMake_CommandLine_CliOptionAttribute_AllowedValues.htm">AllowedValues</a></td><td>
            Gets or sets the list of allowed values for an option.
            <p>Configures an option to accept only the specified values, and to suggest them as command line completions.</p><p>Note that if the option's argument type is an enum, values are automatically added.</p></td></tr><tr><td><a href="P_DotMake_CommandLine_CliOptionAttribute_AllowMultipleArgumentsPerToken.htm">AllowMultipleArgumentsPerToken</a></td><td>
            Gets or sets a value that indicates whether multiple argument tokens are allowed for each option identifier token.
            <p>
            By default, when you call a command, you can repeat an option name to specify multiple arguments for an option that has maximum arity greater than one.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">myapp --items one --items two --items three</code></pre></div></div>
            To allow multiple arguments without repeating the option name, set <a href="P_DotMake_CommandLine_CliOptionAttribute_AllowMultipleArgumentsPerToken.htm">AllowMultipleArgumentsPerToken</a> to <span class="keyword"><span id="LSTDAAA343B_0" data-languageSpecificText="vb=True|nu=true"></span></span>. This setting lets you enter the following command line.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">myapp --items one two three</code></pre></div></div>
            The same setting has a different effect if maximum argument arity is 1. It allows you to repeat an option but takes only the last value on the line. In the following example, the value <span class="code">three</span> would be passed to the app.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">myapp --item one --item two --item three</code></pre></div></div></p></td></tr><tr><td><a href="P_DotMake_CommandLine_CliOptionAttribute_Arity.htm">Arity</a></td><td>
            Gets or sets the arity of the option's argument. The arity refers to the number of values that can be passed on the command line.
            <p>In most cases setting argument arity is not necessary as it is automatically determined based on the argument type (the decorated property's type):</p><ul><li>Boolean -&gt; ArgumentArity.ZeroOrOne</li><li>Collection types -&gt; ArgumentArity.ZeroOrMore</li><li>Everything else -&gt; ArgumentArity.ExactlyOne</li></ul></td></tr><tr><td><a href="P_DotMake_CommandLine_CliOptionAttribute_Description.htm">Description</a></td><td>
            Gets or sets the description of the option. This will be displayed in usage help of the command line application.
            </td></tr><tr><td><a href="P_DotMake_CommandLine_CliOptionAttribute_Global.htm">Global</a></td><td>
            Gets or sets a value indicating whether the option is added to the owner command and recursively to all of its sub-commands.
            <p>Global options do not apply to parent commands.</p></td></tr><tr><td><a href="P_DotMake_CommandLine_CliOptionAttribute_HelpName.htm">HelpName</a></td><td>
            Gets or sets the name of the option's argument when displayed in help.
            </td></tr><tr><td><a href="P_DotMake_CommandLine_CliOptionAttribute_Hidden.htm">Hidden</a></td><td>
            Gets or sets a value indicating whether the option is hidden.
            <p>
            You might want to support a command, option, or argument, but avoid making it easy to discover.
            For example, it might be a deprecated or administrative or preview feature.
            Use the <a href="P_DotMake_CommandLine_CliOptionAttribute_Hidden.htm">Hidden</a> property to prevent users from discovering such features by using tab completion or help.
            </p></td></tr><tr><td><a href="P_DotMake_CommandLine_CliOptionAttribute_Name.htm">Name</a></td><td>
            Gets or sets the name of the option that will be used on the command line to specify the option.
            When manually setting a name (overriding target property’s name), you should specify the option name including the prefix (e.g. <span class="code">--option</span>, <span class="code">-option</span> or <span class="code">/option</span>)
            This will be displayed in usage help of the command line application.
            <p>
            If not set (or is empty/whitespace), the name of the property that this attribute is applied to, will be used to generate option name automatically:
            These suffixes will be stripped from the property name: <span class="code">RootCliCommandOption, RootCommandOption, SubCliCommandOption, SubCommandOption, CliCommandOption, CommandOption, CliOption, Option</span>.
            Then the name will be converted to kebab-case and will be prefixed with POSIX convention two hyphens (<span class="code">--</span>), for example:
            <ul><li>If property name is <span class="code">Input</span> or <span class="code">InputOption</span> or <span class="code">InputCliOption</span> -&gt; option name will be <span class="code">--input</span></li><li>If property name is <span class="code">SearchPath</span> or <span class="code">SearchPathOption</span> or <span class="code">SearchPathCliOption</span> -&gt; option name will be <span class="code">--search-path</span></li></ul></p><p>Default conventions can be changed via parent command's <a href="P_DotMake_CommandLine_CliCommandAttribute_NameCasingConvention.htm">NameCasingConvention</a> and <a href="P_DotMake_CommandLine_CliCommandAttribute_NamePrefixConvention.htm">NamePrefixConvention</a> properties.</p></td></tr><tr><td><a href="P_DotMake_CommandLine_CliOptionAttribute_Required.htm">Required</a></td><td>
            Gets or sets a value indicating whether the option is required when its parent command is invoked.
            Default is auto-detected.
            <p>
            An option/argument will be considered required when
            <ul><li>
                    There is no property initializer and the property type is a reference type (e.g. <span class="code">public string Arg { get; set; }</span>). 
                    <span class="code">string</span> is a reference type which has a null as the default value but <span class="code">bool</span> and <span class="code">enum</span> are value
                    types which already have non-null default values. <span class="code">Nullable&lt;T&gt;</span> is a reference type, e.g. <span class="code">bool?</span>.
                </li><li>
                    There is a property initializer, but it's initialized with <span class="code">null</span> or <span class="code">null!</span> (SuppressNullableWarningExpression)
                    (e.g. <span class="code">public string Arg { get; set; } = null!;</span>).
                </li><li>If it's forced via attribute property <span class="code">Required</span> (e.g. <span class="code">[CliArgument(Required = true)]</span>).</li><li>
                    If it's forced via <span class="code">required</span> modifier (e.g. <span class="code">public required string Opt { get; set; }</span>).
                    Note that for being able to use <span class="code">required</span> modifier, if your target framework is below net7.0, 
                    you also need <span class="code">11.0</span> tag (minimum) in your .csproj file (our source generator supplies the polyfills
                    automatically as long as you set C# language version to 11).
                </li></ul></p><p>
            An option/argument will be considered optional when
            <ul><li>
                    There is no property initializer (e.g. <span class="code">public bool Opt { get; set; }</span>) but the property type is a value type 
                    which already have non-null default value.
                </li><li>
                    There is a property initializer, and it's not initialized with <span class="code">null</span> or <span class="code">null!</span> (SuppressNullableWarningExpression)
                    (e.g. <span class="code">public string Arg { get; set; } = "Default";</span>).
                </li><li>If it's forced via attribute property <span class="code">Required</span> (e.g. <span class="code">[CliArgument(Required = false)]</span>).</li></ul></p><p>
            When an option is required, the option has to be specified on the command line and if its parent command is invoked
            without it, an error message is displayed and the command handler isn't called.
            When an option is not required, the option doesn't have to be specified on the command line, the default value provides the option value.
            </p></td></tr><tr><td><a href="P_DotMake_CommandLine_CliOptionAttribute_ValidationMessage.htm">ValidationMessage</a></td><td>Gets or sets an error message to show when <a href="P_DotMake_CommandLine_CliOptionAttribute_ValidationPattern.htm">ValidationPattern</a> does not match and validation fails.</td></tr><tr><td><a href="P_DotMake_CommandLine_CliOptionAttribute_ValidationPattern.htm">ValidationPattern</a></td><td>
            Gets or sets a regular expression pattern used to determine if option's argument value(s) is valid.
            <p>
            Note that you can specify regular expression options inline in the pattern with the syntax <span class="code">(?imnsx-imnsx)</span>:
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ValidationPattern = @"(?i)^[a-z]+$"</code></pre></div></div><a href="https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference" target="_blank" rel="noopener noreferrer">Regular expression quick reference</a><br /><a href="https://learn.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-options" target="_blank" rel="noopener noreferrer">Regular expression options</a></p></td></tr><tr><td><a href="P_DotMake_CommandLine_CliOptionAttribute_ValidationRules.htm">ValidationRules</a></td><td>
            Gets or sets a set of validation rules used to determine if option's argument value(s) is valid.
            <p>
            When combining validation rules, use bitwise 'or' operator(| in C#):
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ValidationRules = CliValidationRules.NonExistingFile | CliValidationRules.LegalPath</code></pre></div></div></p></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="T_DotMake_CommandLine_CliOptionAttribute.htm">CliOptionAttribute Class</a></div><div><a href="N_DotMake_CommandLine.htm">DotMake.CommandLine Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Properties</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"><p>Copyright © 2023-2024 DotMake</p> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>