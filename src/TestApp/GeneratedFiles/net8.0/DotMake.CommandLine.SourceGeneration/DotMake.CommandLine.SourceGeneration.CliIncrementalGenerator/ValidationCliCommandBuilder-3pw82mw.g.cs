// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v2.5.8.0
// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.26210
// Generation: 1

namespace TestApp.Commands.GeneratedCode
{
    /// <inheritdoc />
    public class ValidationCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public ValidationCliCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.ValidationCliCommand);
            ParentDefinitionType = null;
            ChildDefinitionTypes = null;
            NameAutoGenerate = null;
            NameCasingConvention = null;
            NamePrefixConvention = null;
            ShortFormAutoGenerate = null;
            ShortFormPrefixConvention = null;
        }

        private TestApp.Commands.ValidationCliCommand CreateInstance()
        {
            return new TestApp.Commands.ValidationCliCommand();
        }

        /// <inheritdoc />
        protected override System.CommandLine.Command DoBuild()
        {
            // Command for 'ValidationCliCommand' class
            var commandName = Namer.GetCommandName("ValidationCliCommand");
            var command = IsRoot
                ? new System.CommandLine.RootCommand()
                : new System.CommandLine.Command(commandName);
            var rootCommand = command as System.CommandLine.RootCommand;
            Namer.AddShortFormAlias(command, "ValidationCliCommand");

            // Option for 'OptFile1' property
            var option0Name = Namer.GetOptionName("OptFile1");
            var option0 = new System.CommandLine.Option<System.IO.FileInfo>
            (
                option0Name
            )
            {
                Required = false,
                CustomParser = GetArgumentParser<System.IO.FileInfo>
                (
                    null
                ),
            };
            DotMake.CommandLine.CliValidationExtensions.AddValidator(option0, DotMake.CommandLine.CliValidationRules.ExistingFile);
            Namer.AddShortFormAlias(option0, "OptFile1");
            command.Add(option0);

            // Option for 'OptFile2' property
            var option1Name = Namer.GetOptionName("OptFile2");
            var option1 = new System.CommandLine.Option<string>
            (
                option1Name
            )
            {
                Required = false,
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            DotMake.CommandLine.CliValidationExtensions.AddValidator(option1, DotMake.CommandLine.CliValidationRules.None | DotMake.CommandLine.CliValidationRules.NonExistingFile | DotMake.CommandLine.CliValidationRules.LegalPath);
            Namer.AddShortFormAlias(option1, "OptFile2");
            command.Add(option1);

            // Option for 'OptDir' property
            var option2Name = Namer.GetOptionName("OptDir");
            var option2 = new System.CommandLine.Option<System.IO.DirectoryInfo>
            (
                option2Name
            )
            {
                Required = false,
                CustomParser = GetArgumentParser<System.IO.DirectoryInfo>
                (
                    null
                ),
            };
            DotMake.CommandLine.CliValidationExtensions.AddValidator(option2, DotMake.CommandLine.CliValidationRules.ExistingDirectory);
            Namer.AddShortFormAlias(option2, "OptDir");
            command.Add(option2);

            // Option for 'OptPattern1' property
            var option3Name = Namer.GetOptionName("OptPattern1");
            var option3 = new System.CommandLine.Option<string>
            (
                option3Name
            )
            {
                Required = false,
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            DotMake.CommandLine.CliValidationExtensions.AddValidator(option3, "(?i)^[a-z]+$");
            Namer.AddShortFormAlias(option3, "OptPattern1");
            command.Add(option3);

            // Option for 'OptPattern2' property
            var option4Name = Namer.GetOptionName("OptPattern2");
            var option4 = new System.CommandLine.Option<string>
            (
                option4Name
            )
            {
                Required = false,
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            DotMake.CommandLine.CliValidationExtensions.AddValidator(option4, "(?i)^[a-z]+$", "Custom error message");
            Namer.AddShortFormAlias(option4, "OptPattern2");
            command.Add(option4);

            // Option for 'OptUrl' property
            var option5Name = Namer.GetOptionName("OptUrl");
            var option5 = new System.CommandLine.Option<string>
            (
                option5Name
            )
            {
                Required = false,
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            DotMake.CommandLine.CliValidationExtensions.AddValidator(option5, DotMake.CommandLine.CliValidationRules.LegalUrl);
            Namer.AddShortFormAlias(option5, "OptUrl");
            command.Add(option5);

            // Option for 'OptUri' property
            var option6Name = Namer.GetOptionName("OptUri");
            var option6 = new System.CommandLine.Option<string>
            (
                option6Name
            )
            {
                Required = false,
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            DotMake.CommandLine.CliValidationExtensions.AddValidator(option6, DotMake.CommandLine.CliValidationRules.LegalUri);
            Namer.AddShortFormAlias(option6, "OptUri");
            command.Add(option6);

            // Argument for 'OptFileName' property
            var argument0Name = Namer.GetArgumentName("OptFileName");
            var argument0 = new System.CommandLine.Argument<string>
            (
                argument0Name
            )
            {
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            DotMake.CommandLine.CliValidationExtensions.AddValidator(argument0, DotMake.CommandLine.CliValidationRules.LegalFileName);
            command.Add(argument0);

            Binder = (parseResult) =>
            {
                var targetClass = CreateInstance();

                //  Set the values for the parent command accessors

                //  Set the parsed or default values for the directives

                //  Set the parsed or default values for the options
                targetClass.OptFile1 = GetValueForOption(parseResult, option0);
                targetClass.OptFile2 = GetValueForOption(parseResult, option1);
                targetClass.OptDir = GetValueForOption(parseResult, option2);
                targetClass.OptPattern1 = GetValueForOption(parseResult, option3);
                targetClass.OptPattern2 = GetValueForOption(parseResult, option4);
                targetClass.OptUrl = GetValueForOption(parseResult, option5);
                targetClass.OptUri = GetValueForOption(parseResult, option6);

                //  Set the parsed or default values for the arguments
                targetClass.OptFileName = GetValueForArgument(parseResult, argument0);

                return targetClass;
            };

            command.SetAction(parseResult =>
            {
                var targetClass = (TestApp.Commands.ValidationCliCommand) Bind(parseResult);

                //  Call the command handler
                var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                var exitCode = 0;
                targetClass.Run(cliContext);

                return exitCode;
            });

            return command;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.GeneratedCode.ValidationCliCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }
    }
}
