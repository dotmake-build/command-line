// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v2.5.8.0
// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.26210
// Generation: 1

namespace TestApp.Commands.GeneratedCode
{
    /// <inheritdoc />
    public class OptionBundlingCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public OptionBundlingCliCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.OptionBundlingCliCommand);
            ParentDefinitionType = null;
            ChildDefinitionTypes = null;
            NameAutoGenerate = null;
            NameCasingConvention = null;
            NamePrefixConvention = null;
            ShortFormAutoGenerate = null;
            ShortFormPrefixConvention = null;
        }

        private TestApp.Commands.OptionBundlingCliCommand CreateInstance()
        {
            return new TestApp.Commands.OptionBundlingCliCommand();
        }

        /// <inheritdoc />
        protected override System.CommandLine.Command DoBuild()
        {
            // Command for 'OptionBundlingCliCommand' class
            var commandName = Namer.GetCommandName("OptionBundlingCliCommand");
            var command = IsRoot
                ? new System.CommandLine.RootCommand()
                : new System.CommandLine.Command(commandName);
            var rootCommand = command as System.CommandLine.RootCommand;
            Namer.AddShortFormAlias(command, "OptionBundlingCliCommand");

            // Option for 'A' property
            var option0Name = Namer.GetOptionName("A", "-a");
            var option0 = new System.CommandLine.Option<bool>
            (
                option0Name
            )
            {
                Required = false,
                CustomParser = GetArgumentParser<bool>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option0, "A");
            command.Add(option0);

            // Option for 'B' property
            var option1Name = Namer.GetOptionName("B", "-b");
            var option1 = new System.CommandLine.Option<bool>
            (
                option1Name
            )
            {
                Required = false,
                CustomParser = GetArgumentParser<bool>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option1, "B");
            command.Add(option1);

            // Option for 'C' property
            var option2Name = Namer.GetOptionName("C", "-c");
            var option2 = new System.CommandLine.Option<bool>
            (
                option2Name
            )
            {
                Required = false,
                CustomParser = GetArgumentParser<bool>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option2, "C");
            command.Add(option2);

            Binder = (parseResult) =>
            {
                var targetClass = CreateInstance();

                //  Set the values for the parent command accessors

                //  Set the parsed or default values for the directives

                //  Set the parsed or default values for the options
                targetClass.A = GetValueForOption(parseResult, option0);
                targetClass.B = GetValueForOption(parseResult, option1);
                targetClass.C = GetValueForOption(parseResult, option2);

                //  Set the parsed or default values for the arguments

                return targetClass;
            };

            command.SetAction(parseResult =>
            {
                var targetClass = (TestApp.Commands.OptionBundlingCliCommand) Bind(parseResult);

                //  Call the command handler
                var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                var exitCode = 0;
                targetClass.Run(cliContext);

                return exitCode;
            });

            return command;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.GeneratedCode.OptionBundlingCliCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }
    }
}
