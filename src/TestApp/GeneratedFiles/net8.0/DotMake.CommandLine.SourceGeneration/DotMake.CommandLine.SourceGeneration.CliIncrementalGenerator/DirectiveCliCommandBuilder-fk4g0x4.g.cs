// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v2.6.2.0
// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.26210
// Generation: 1

namespace TestApp.Commands.GeneratedCode
{
    /// <inheritdoc />
    public class DirectiveCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public DirectiveCliCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.DirectiveCliCommand);
            ParentDefinitionType = null;
            ChildDefinitionTypes = null;
            NameAutoGenerate = null;
            NameCasingConvention = null;
            NamePrefixConvention = null;
            ShortFormAutoGenerate = null;
            ShortFormPrefixConvention = null;
        }

        private TestApp.Commands.DirectiveCliCommand CreateInstance()
        {
            return new TestApp.Commands.DirectiveCliCommand();
        }

        /// <inheritdoc />
        protected override System.CommandLine.Command DoBuild(DotMake.CommandLine.CliBindingContext bindingContext)
        {
            // Command for 'DirectiveCliCommand' class
            var commandName = Namer.GetCommandName("DirectiveCliCommand");
            var command = IsRoot
                ? new System.CommandLine.RootCommand()
                : new System.CommandLine.Command(commandName);
            var rootCommand = command as System.CommandLine.RootCommand;
            command.Description = "A root cli command with directives";
            Namer.AddShortFormAlias(command, "DirectiveCliCommand");

            // Directive for 'Debug' property
            var directive0Name = Namer.GetDirectiveName("Debug");
            var directive0 = new System.CommandLine.Directive
            (
                directive0Name
            )
            {
            };
            rootCommand?.Add(directive0);

            // Directive for 'Directive2' property
            var directive1Name = Namer.GetDirectiveName("Directive2");
            var directive1 = new System.CommandLine.Directive
            (
                directive1Name
            )
            {
            };
            rootCommand?.Add(directive1);

            // Directive for 'Vars' property
            var directive2Name = Namer.GetDirectiveName("Vars");
            var directive2 = new System.CommandLine.Directive
            (
                directive2Name
            )
            {
            };
            rootCommand?.Add(directive2);

            bindingContext.Binders[DefinitionType] = (parseResult) =>
            {
                var targetClass = CreateInstance();

                // Set the values for the parent command accessors

                // Set the parsed or default values for the directives
                targetClass.Debug = GetValueForDirective<bool>(parseResult, directive0);
                targetClass.Directive2 = GetValueForDirective<string>(parseResult, directive1);
                targetClass.Vars = GetValueForDirective<string[]>(parseResult, directive2);

                // Set the parsed or default values for the options

                // Set the parsed or default values for the arguments

                return targetClass;
            };

            command.SetAction(parseResult =>
            {
                var targetClass = bindingContext.Bind<TestApp.Commands.DirectiveCliCommand>(parseResult);

                // Call the command handler
                var cliContext = new DotMake.CommandLine.CliContext(bindingContext, parseResult);
                var exitCode = 0;
                targetClass.Run(cliContext);

                return exitCode;
            });

            return command;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.GeneratedCode.DirectiveCliCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }
    }
}
