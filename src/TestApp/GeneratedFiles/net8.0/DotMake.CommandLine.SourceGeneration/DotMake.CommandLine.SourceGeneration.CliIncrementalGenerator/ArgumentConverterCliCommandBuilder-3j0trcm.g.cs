// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v2.7.0.0
// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.35903
// Generation: 1

namespace TestApp.Commands.GeneratedCode
{
    /// <inheritdoc />
    public class ArgumentConverterCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public ArgumentConverterCliCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.ArgumentConverterCliCommand);
            ParentDefinitionType = null;
            ChildDefinitionTypes = null;
            NameAutoGenerate = null;
            NameCasingConvention = null;
            NamePrefixConvention = null;
            ShortFormAutoGenerate = null;
            ShortFormPrefixConvention = null;
        }

        /// <inheritdoc />
        protected override System.CommandLine.Command DoBuild(DotMake.CommandLine.CliBindingContext bindingContext)
        {
            // Command for 'ArgumentConverterCliCommand' class
            var command = IsRoot
                ? new System.CommandLine.RootCommand()
                : new System.CommandLine.Command
                (
                    Namer.GetCommandName("ArgumentConverterCliCommand")
                );
            var rootCommand = command as System.CommandLine.RootCommand;
            Namer.AddShortFormAlias(command, "ArgumentConverterCliCommand");

            // Option for 'Opt' property
            var option0 = new System.CommandLine.Option<TestApp.Commands.ClassWithConstructor>
            (
                Namer.GetOptionName("Opt")
            )
            {
                Required = false,
                CustomParser = bindingContext.GetArgumentParser<TestApp.Commands.ClassWithConstructor>
                (
                    input => new TestApp.Commands.ClassWithConstructor(input)
                ),
            };
            Namer.AddShortFormAlias(option0, "Opt");
            command.Add(option0);

            // Option for 'OptArray' property
            var option1 = new System.CommandLine.Option<TestApp.Commands.ClassWithConstructor[]>
            (
                Namer.GetOptionName("OptArray")
            )
            {
                AllowMultipleArgumentsPerToken = true,
                Required = false,
                CustomParser = bindingContext.GetArgumentParser<TestApp.Commands.ClassWithConstructor[], TestApp.Commands.ClassWithConstructor>
                (
                    array => (TestApp.Commands.ClassWithConstructor[])array,
                    item => new TestApp.Commands.ClassWithConstructor(item)
                ),
            };
            Namer.AddShortFormAlias(option1, "OptArray");
            command.Add(option1);

            // Option for 'OptNullable' property
            var option2 = new System.CommandLine.Option<TestApp.Commands.CustomStruct?>
            (
                Namer.GetOptionName("OptNullable")
            )
            {
                Required = false,
                CustomParser = bindingContext.GetArgumentParser<TestApp.Commands.CustomStruct?>
                (
                    input => new TestApp.Commands.CustomStruct(input)
                ),
            };
            Namer.AddShortFormAlias(option2, "OptNullable");
            command.Add(option2);

            // Option for 'OptEnumerable' property
            var option3 = new System.CommandLine.Option<System.Collections.Generic.IEnumerable<TestApp.Commands.ClassWithConstructor>>
            (
                Namer.GetOptionName("OptEnumerable")
            )
            {
                Required = false,
                CustomParser = bindingContext.GetArgumentParser<System.Collections.Generic.IEnumerable<TestApp.Commands.ClassWithConstructor>, TestApp.Commands.ClassWithConstructor>
                (
                    array => (TestApp.Commands.ClassWithConstructor[])array,
                    item => new TestApp.Commands.ClassWithConstructor(item)
                ),
            };
            Namer.AddShortFormAlias(option3, "OptEnumerable");
            command.Add(option3);

            // Option for 'OptList' property
            var option4 = new System.CommandLine.Option<System.Collections.Generic.List<TestApp.Commands.ClassWithConstructor>>
            (
                Namer.GetOptionName("OptList")
            )
            {
                Required = false,
                CustomParser = bindingContext.GetArgumentParser<System.Collections.Generic.List<TestApp.Commands.ClassWithConstructor>, TestApp.Commands.ClassWithConstructor>
                (
                    array => new System.Collections.Generic.List<TestApp.Commands.ClassWithConstructor>((TestApp.Commands.ClassWithConstructor[])array),
                    item => new TestApp.Commands.ClassWithConstructor(item)
                ),
            };
            Namer.AddShortFormAlias(option4, "OptList");
            command.Add(option4);

            // Option for 'OptCustomList' property
            var option5 = new System.CommandLine.Option<TestApp.Commands.CustomList<TestApp.Commands.ClassWithConstructor>>
            (
                Namer.GetOptionName("OptCustomList")
            )
            {
                Required = false,
                CustomParser = bindingContext.GetArgumentParser<TestApp.Commands.CustomList<TestApp.Commands.ClassWithConstructor>, TestApp.Commands.ClassWithConstructor>
                (
                    array => new TestApp.Commands.CustomList<TestApp.Commands.ClassWithConstructor>((TestApp.Commands.ClassWithConstructor[])array),
                    item => new TestApp.Commands.ClassWithConstructor(item)
                ),
            };
            Namer.AddShortFormAlias(option5, "OptCustomList");
            command.Add(option5);

            // Argument for 'Arg' property
            var argument0 = new System.CommandLine.Argument<System.Collections.Generic.IEnumerable<TestApp.Commands.ClassWithParser>>
            (
                Namer.GetArgumentName("Arg")
            )
            {
                CustomParser = bindingContext.GetArgumentParser<System.Collections.Generic.IEnumerable<TestApp.Commands.ClassWithParser>, TestApp.Commands.ClassWithParser>
                (
                    array => (TestApp.Commands.ClassWithParser[])array,
                    item => TestApp.Commands.ClassWithParser.Parse(item)
                ),
            };
            argument0.Arity = System.CommandLine.ArgumentArity.OneOrMore;
            command.Add(argument0);

            bindingContext.CommandMap[command] = DefinitionType;
            bindingContext.CreatorMap[DefinitionType] = () =>
            {
                return new TestApp.Commands.ArgumentConverterCliCommand();
            };
            bindingContext.BinderMap[DefinitionType] = (instance, parseResult) =>
            {
                var definitionInstance = (TestApp.Commands.ArgumentConverterCliCommand)instance;

                // Set the values for the command accessors

                // Set the parsed or default values for the directives

                // Set the parsed or default values for the options
                definitionInstance.Opt = bindingContext.GetValue(parseResult, option0);
                definitionInstance.OptArray = bindingContext.GetValue(parseResult, option1);
                definitionInstance.OptNullable = bindingContext.GetValue(parseResult, option2);
                definitionInstance.OptEnumerable = bindingContext.GetValue(parseResult, option3);
                definitionInstance.OptList = bindingContext.GetValue(parseResult, option4);
                definitionInstance.OptCustomList = bindingContext.GetValue(parseResult, option5);

                // Set the parsed or default values for the arguments
                definitionInstance.Arg = bindingContext.GetValue(parseResult, argument0);
            };

            command.SetAction(parseResult =>
            {
                var definitionInstance = bindingContext.Bind<TestApp.Commands.ArgumentConverterCliCommand>(parseResult);

                // Call the command handler
                var cliContext = new DotMake.CommandLine.CliContext(bindingContext, parseResult);
                var exitCode = 0;
                definitionInstance.Run(cliContext);

                return exitCode;
            });

            return command;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.GeneratedCode.ArgumentConverterCliCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }
    }
}
