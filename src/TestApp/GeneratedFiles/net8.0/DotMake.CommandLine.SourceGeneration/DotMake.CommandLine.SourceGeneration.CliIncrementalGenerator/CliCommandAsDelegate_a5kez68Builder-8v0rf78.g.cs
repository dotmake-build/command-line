// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v2.5.5.0
// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.26210
// Generation: 1

namespace GeneratedCode
{
    /// <inheritdoc />
    public class CliCommandAsDelegate_a5kez68Builder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public CliCommandAsDelegate_a5kez68Builder()
        {
            DefinitionType = typeof(GeneratedCode.CliCommandAsDelegate_a5kez68);
            ParentDefinitionType = null;
            ChildDefinitionTypes = null;
            NameAutoGenerate = null;
            NameCasingConvention = null;
            NamePrefixConvention = null;
            ShortFormAutoGenerate = null;
            ShortFormPrefixConvention = null;
        }

        private GeneratedCode.CliCommandAsDelegate_a5kez68 CreateInstance()
        {
            return new GeneratedCode.CliCommandAsDelegate_a5kez68();
        }

        /// <inheritdoc />
        public override System.CommandLine.Command Build()
        {
            var namer = new DotMake.CommandLine.CliNamer
            (
                NameAutoGenerate,
                NameCasingConvention,
                NamePrefixConvention,
                ShortFormAutoGenerate,
                ShortFormPrefixConvention
            );

            // Command for 'CliCommandAsDelegate_a5kez68' class
            var commandName = namer.GetCommandName("CliCommandAsDelegate_a5kez68", false);
            var command = IsRoot
                ? new System.CommandLine.RootCommand()
                : new System.CommandLine.Command(commandName);
            var rootCommand = command as System.CommandLine.RootCommand;
            namer.AddShortFormAlias(command, commandName, false);

            // Option for 'option1' property
            var option0Name = namer.GetOptionName("option1", false);
            var option0 = new System.CommandLine.Option<bool>
            (
                option0Name
            )
            {
                Required = false,
                CustomParser = GetArgumentParser<bool>
                (
                    null
                ),
            };
            namer.AddShortFormAlias(option0, option0Name, false);
            command.Add(option0);

            // Argument for 'argument1' property
            var argument0Name = namer.GetArgumentName("argument1", false);
            var argument0 = new System.CommandLine.Argument<string>
            (
                argument0Name
            )
            {
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            command.Add(argument0);

            Binder = (parseResult) =>
            {
                var targetClass = CreateInstance();

                //  Set the parsed or default values for the directives

                //  Set the parsed or default values for the options
                targetClass.option1 = GetValueForOption(parseResult, option0);

                //  Set the parsed or default values for the arguments
                targetClass.argument1 = GetValueForArgument(parseResult, argument0);

                //  Set the values for the parent command accessors

                return targetClass;
            };

            command.SetAction(async (parseResult, cancellationToken) =>
            {
                var targetClass = (GeneratedCode.CliCommandAsDelegate_a5kez68) Bind(parseResult);

                //  Call the command handler
                var cliContext = new DotMake.CommandLine.CliContext(parseResult, cancellationToken);
                var exitCode = 0;
                await targetClass.RunAsync();

                return exitCode;
            });

            return command;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new GeneratedCode.CliCommandAsDelegate_a5kez68Builder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }
    }
}
