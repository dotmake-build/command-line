// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v2.5.6.0
// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.26210
// Generation: 1

namespace TestApp.Commands.GeneratedCode
{
    /// <inheritdoc />
    public class NullableReferenceCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public NullableReferenceCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.NullableReferenceCommand);
            ParentDefinitionType = null;
            ChildDefinitionTypes = null;
            NameAutoGenerate = null;
            NameCasingConvention = null;
            NamePrefixConvention = null;
            ShortFormAutoGenerate = null;
            ShortFormPrefixConvention = null;
        }

        private TestApp.Commands.NullableReferenceCommand CreateInstance()
        {
            return new TestApp.Commands.NullableReferenceCommand();
        }

        /// <inheritdoc />
        public override System.CommandLine.Command Build()
        {
            var namer = new DotMake.CommandLine.CliNamer
            (
                NameAutoGenerate,
                NameCasingConvention,
                NamePrefixConvention,
                ShortFormAutoGenerate,
                ShortFormPrefixConvention
            );

            // Command for 'NullableReferenceCommand' class
            var commandName = namer.GetCommandName("NullableReference", false);
            var command = IsRoot
                ? new System.CommandLine.RootCommand()
                : new System.CommandLine.Command(commandName);
            var rootCommand = command as System.CommandLine.RootCommand;
            namer.AddShortFormAlias(command, commandName, false);

            Binder = (parseResult) =>
            {
                var targetClass = CreateInstance();

                //  Set the parsed or default values for the directives

                //  Set the parsed or default values for the options

                //  Set the parsed or default values for the arguments

                //  Set the values for the parent command accessors

                return targetClass;
            };

            command.SetAction(parseResult =>
            {
                var targetClass = (TestApp.Commands.NullableReferenceCommand) Bind(parseResult);

                //  Call the command handler
                var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                var exitCode = 0;
                targetClass.Run();

                return exitCode;
            });

            return command;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.GeneratedCode.NullableReferenceCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }

        /// <inheritdoc />
        public class NullableCommandBuilder : DotMake.CommandLine.CliCommandBuilder
        {
            /// <inheritdoc />
            public NullableCommandBuilder()
            {
                DefinitionType = typeof(TestApp.Commands.NullableReferenceCommand.NullableCommand);
                ParentDefinitionType = typeof(TestApp.Commands.NullableReferenceCommand);
                ChildDefinitionTypes = null;
                NameAutoGenerate = null;
                NameCasingConvention = null;
                NamePrefixConvention = null;
                ShortFormAutoGenerate = null;
                ShortFormPrefixConvention = null;
            }

            private TestApp.Commands.NullableReferenceCommand.NullableCommand CreateInstance()
            {
                return new TestApp.Commands.NullableReferenceCommand.NullableCommand();
            }

            /// <inheritdoc />
            public override System.CommandLine.Command Build()
            {
                var namer = new DotMake.CommandLine.CliNamer
                (
                    NameAutoGenerate,
                    NameCasingConvention,
                    NamePrefixConvention,
                    ShortFormAutoGenerate,
                    ShortFormPrefixConvention
                );

                // Command for 'NullableCommand' class
                var commandName = namer.GetCommandName("Nullable", false);
                var command = IsRoot
                    ? new System.CommandLine.RootCommand()
                    : new System.CommandLine.Command(commandName);
                var rootCommand = command as System.CommandLine.RootCommand;
                namer.AddShortFormAlias(command, commandName, false);

                // Option for 'Opt' property
                var option0Name = namer.GetOptionName("Opt", false);
                var option0 = new System.CommandLine.Option<string>
                (
                    option0Name
                )
                {
                    Description = "Option with nullable reference type with no default value (should be required)",
                    Required = true,
                    CustomParser = GetArgumentParser<string>
                    (
                        null
                    ),
                };
                option0.AcceptOnlyFromAmong(new[] {"Big", "Small"});
                namer.AddShortFormAlias(option0, option0Name, false);
                command.Add(option0);

                // Option for 'OptDefault' property
                var option1Name = namer.GetOptionName("OptDefault", false);
                var option1 = new System.CommandLine.Option<string>
                (
                    option1Name
                )
                {
                    Description = "Option with nullable reference type with default value (should not be required)",
                    Required = false,
                    DefaultValueFactory = _ => "Big",
                    CustomParser = GetArgumentParser<string>
                    (
                        null
                    ),
                };
                option1.AcceptOnlyFromAmong(new[] {"Big", "Small"});
                namer.AddShortFormAlias(option1, option1Name, false);
                command.Add(option1);

                // Argument for 'Arg' property
                var argument0Name = namer.GetArgumentName("Arg", false);
                var argument0 = new System.CommandLine.Argument<string>
                (
                    argument0Name
                )
                {
                    Description = "Argument with nullable reference type with no default value (should be required)",
                    CustomParser = GetArgumentParser<string>
                    (
                        null
                    ),
                };
                command.Add(argument0);

                // Argument for 'ArgDefault' property
                var argument1Name = namer.GetArgumentName("ArgDefault", false);
                var argument1 = new System.CommandLine.Argument<string>
                (
                    argument1Name
                )
                {
                    Description = "Argument with nullable reference type with default value (should not be required)",
                    DefaultValueFactory = _ => "test",
                    CustomParser = GetArgumentParser<string>
                    (
                        null
                    ),
                };
                command.Add(argument1);

                Binder = (parseResult) =>
                {
                    var targetClass = CreateInstance();

                    //  Set the parsed or default values for the directives

                    //  Set the parsed or default values for the options
                    targetClass.Opt = GetValueForOption(parseResult, option0);
                    targetClass.OptDefault = GetValueForOption(parseResult, option1);

                    //  Set the parsed or default values for the arguments
                    targetClass.Arg = GetValueForArgument(parseResult, argument0);
                    targetClass.ArgDefault = GetValueForArgument(parseResult, argument1);

                    //  Set the values for the parent command accessors

                    return targetClass;
                };

                command.SetAction(parseResult =>
                {
                    var targetClass = (TestApp.Commands.NullableReferenceCommand.NullableCommand) Bind(parseResult);

                    //  Call the command handler
                    var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                    var exitCode = 0;
                    targetClass.Run(cliContext);

                    return exitCode;
                });

                return command;
            }

            [System.Runtime.CompilerServices.ModuleInitializerAttribute]
            internal static void Initialize()
            {
                var commandBuilder = new TestApp.Commands.GeneratedCode.NullableReferenceCommandBuilder.NullableCommandBuilder();

                // Register this command builder so that it can be found by the definition class
                // and it can be found by the parent definition class if it's a nested/external child.
                commandBuilder.Register();
            }
        }

        /// <inheritdoc />
        public class NonNullableCommandBuilder : DotMake.CommandLine.CliCommandBuilder
        {
            /// <inheritdoc />
            public NonNullableCommandBuilder()
            {
                DefinitionType = typeof(TestApp.Commands.NullableReferenceCommand.NonNullableCommand);
                ParentDefinitionType = typeof(TestApp.Commands.NullableReferenceCommand);
                ChildDefinitionTypes = null;
                NameAutoGenerate = null;
                NameCasingConvention = null;
                NamePrefixConvention = null;
                ShortFormAutoGenerate = null;
                ShortFormPrefixConvention = null;
            }

            private TestApp.Commands.NullableReferenceCommand.NonNullableCommand CreateInstance()
            {
                return new TestApp.Commands.NullableReferenceCommand.NonNullableCommand();
            }

            /// <inheritdoc />
            public override System.CommandLine.Command Build()
            {
                var namer = new DotMake.CommandLine.CliNamer
                (
                    NameAutoGenerate,
                    NameCasingConvention,
                    NamePrefixConvention,
                    ShortFormAutoGenerate,
                    ShortFormPrefixConvention
                );

                // Command for 'NonNullableCommand' class
                var commandName = namer.GetCommandName("NonNullable", false);
                var command = IsRoot
                    ? new System.CommandLine.RootCommand()
                    : new System.CommandLine.Command(commandName);
                var rootCommand = command as System.CommandLine.RootCommand;
                namer.AddShortFormAlias(command, commandName, false);

                // Option for 'Opt' property
                var option0Name = namer.GetOptionName("Opt", false);
                var option0 = new System.CommandLine.Option<string>
                (
                    option0Name
                )
                {
                    Description = "Option with non-nullable reference type with SuppressNullableWarningExpression (should be required)",
                    Required = true,
                    CustomParser = GetArgumentParser<string>
                    (
                        null
                    ),
                };
                option0.AcceptOnlyFromAmong(new[] {"Big", "Small"});
                namer.AddShortFormAlias(option0, option0Name, false);
                command.Add(option0);

                // Option for 'OptDefault' property
                var option1Name = namer.GetOptionName("OptDefault", false);
                var option1 = new System.CommandLine.Option<string>
                (
                    option1Name
                )
                {
                    Description = "Option with non-nullable reference type with default value (should not be required)",
                    Required = false,
                    DefaultValueFactory = _ => "Big",
                    CustomParser = GetArgumentParser<string>
                    (
                        null
                    ),
                };
                option1.AcceptOnlyFromAmong(new[] {"Big", "Small"});
                namer.AddShortFormAlias(option1, option1Name, false);
                command.Add(option1);

                // Argument for 'Arg' property
                var argument0Name = namer.GetArgumentName("Arg", false);
                var argument0 = new System.CommandLine.Argument<string>
                (
                    argument0Name
                )
                {
                    Description = "Argument with non-nullable reference type type with SuppressNullableWarningExpression (should be required)",
                    CustomParser = GetArgumentParser<string>
                    (
                        null
                    ),
                };
                command.Add(argument0);

                // Argument for 'ArgDefault' property
                var argument1Name = namer.GetArgumentName("ArgDefault", false);
                var argument1 = new System.CommandLine.Argument<string>
                (
                    argument1Name
                )
                {
                    Description = "Argument with non-nullable reference type with default value (should not be required)",
                    DefaultValueFactory = _ => "test",
                    CustomParser = GetArgumentParser<string>
                    (
                        null
                    ),
                };
                command.Add(argument1);

                Binder = (parseResult) =>
                {
                    var targetClass = CreateInstance();

                    //  Set the parsed or default values for the directives

                    //  Set the parsed or default values for the options
                    targetClass.Opt = GetValueForOption(parseResult, option0);
                    targetClass.OptDefault = GetValueForOption(parseResult, option1);

                    //  Set the parsed or default values for the arguments
                    targetClass.Arg = GetValueForArgument(parseResult, argument0);
                    targetClass.ArgDefault = GetValueForArgument(parseResult, argument1);

                    //  Set the values for the parent command accessors

                    return targetClass;
                };

                command.SetAction(parseResult =>
                {
                    var targetClass = (TestApp.Commands.NullableReferenceCommand.NonNullableCommand) Bind(parseResult);

                    //  Call the command handler
                    var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                    var exitCode = 0;
                    targetClass.Run(cliContext);

                    return exitCode;
                });

                return command;
            }

            [System.Runtime.CompilerServices.ModuleInitializerAttribute]
            internal static void Initialize()
            {
                var commandBuilder = new TestApp.Commands.GeneratedCode.NullableReferenceCommandBuilder.NonNullableCommandBuilder();

                // Register this command builder so that it can be found by the definition class
                // and it can be found by the parent definition class if it's a nested/external child.
                commandBuilder.Register();
            }
        }

        /// <inheritdoc />
        public class RequiredCommandBuilder : DotMake.CommandLine.CliCommandBuilder
        {
            /// <inheritdoc />
            public RequiredCommandBuilder()
            {
                DefinitionType = typeof(TestApp.Commands.NullableReferenceCommand.RequiredCommand);
                ParentDefinitionType = typeof(TestApp.Commands.NullableReferenceCommand);
                ChildDefinitionTypes = null;
                NameAutoGenerate = null;
                NameCasingConvention = null;
                NamePrefixConvention = null;
                ShortFormAutoGenerate = null;
                ShortFormPrefixConvention = null;
            }

            private TestApp.Commands.NullableReferenceCommand.RequiredCommand CreateInstance()
            {
                return System.Activator.CreateInstance<TestApp.Commands.NullableReferenceCommand.RequiredCommand>();
            }

            /// <inheritdoc />
            public override System.CommandLine.Command Build()
            {
                var namer = new DotMake.CommandLine.CliNamer
                (
                    NameAutoGenerate,
                    NameCasingConvention,
                    NamePrefixConvention,
                    ShortFormAutoGenerate,
                    ShortFormPrefixConvention
                );

                // Command for 'RequiredCommand' class
                var commandName = namer.GetCommandName("Required", false);
                var command = IsRoot
                    ? new System.CommandLine.RootCommand()
                    : new System.CommandLine.Command(commandName);
                var rootCommand = command as System.CommandLine.RootCommand;
                namer.AddShortFormAlias(command, commandName, false);

                // Option for 'Opt' property
                var option0Name = namer.GetOptionName("Opt", false);
                var option0 = new System.CommandLine.Option<string>
                (
                    option0Name
                )
                {
                    Description = "Option with required keyword with no default value (should be required)",
                    Required = true,
                    CustomParser = GetArgumentParser<string>
                    (
                        null
                    ),
                };
                option0.AcceptOnlyFromAmong(new[] {"Big", "Small"});
                namer.AddShortFormAlias(option0, option0Name, false);
                command.Add(option0);

                // Option for 'OptDefault' property
                var option1Name = namer.GetOptionName("OptDefault", false);
                var option1 = new System.CommandLine.Option<string>
                (
                    option1Name
                )
                {
                    Description = "Option with required keyword with default value (should not be required)",
                    Required = false,
                    DefaultValueFactory = _ => "Big",
                    CustomParser = GetArgumentParser<string>
                    (
                        null
                    ),
                };
                option1.AcceptOnlyFromAmong(new[] {"Big", "Small"});
                namer.AddShortFormAlias(option1, option1Name, false);
                command.Add(option1);

                // Argument for 'Arg' property
                var argument0Name = namer.GetArgumentName("Arg", false);
                var argument0 = new System.CommandLine.Argument<string>
                (
                    argument0Name
                )
                {
                    Description = "Argument with required keyword with no default value (should be required)",
                    CustomParser = GetArgumentParser<string>
                    (
                        null
                    ),
                };
                command.Add(argument0);

                // Argument for 'ArgDefault' property
                var argument1Name = namer.GetArgumentName("ArgDefault", false);
                var argument1 = new System.CommandLine.Argument<string>
                (
                    argument1Name
                )
                {
                    Description = "Argument with required keyword with default value (should not be required)",
                    DefaultValueFactory = _ => "test",
                    CustomParser = GetArgumentParser<string>
                    (
                        null
                    ),
                };
                command.Add(argument1);

                Binder = (parseResult) =>
                {
                    var targetClass = CreateInstance();

                    //  Set the parsed or default values for the directives

                    //  Set the parsed or default values for the options
                    targetClass.Opt = GetValueForOption(parseResult, option0);
                    targetClass.OptDefault = GetValueForOption(parseResult, option1);

                    //  Set the parsed or default values for the arguments
                    targetClass.Arg = GetValueForArgument(parseResult, argument0);
                    targetClass.ArgDefault = GetValueForArgument(parseResult, argument1);

                    //  Set the values for the parent command accessors

                    return targetClass;
                };

                command.SetAction(parseResult =>
                {
                    var targetClass = (TestApp.Commands.NullableReferenceCommand.RequiredCommand) Bind(parseResult);

                    //  Call the command handler
                    var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                    var exitCode = 0;
                    targetClass.Run(cliContext);

                    return exitCode;
                });

                return command;
            }

            [System.Runtime.CompilerServices.ModuleInitializerAttribute]
            internal static void Initialize()
            {
                var commandBuilder = new TestApp.Commands.GeneratedCode.NullableReferenceCommandBuilder.RequiredCommandBuilder();

                // Register this command builder so that it can be found by the definition class
                // and it can be found by the parent definition class if it's a nested/external child.
                commandBuilder.Register();
            }
        }
    }
}
