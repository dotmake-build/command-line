// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v2.5.5.0
// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.26210
// Generation: 1

namespace TestApp.Commands.GeneratedCode
{
    /// <inheritdoc />
    public class EnumerableCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public EnumerableCliCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.EnumerableCliCommand);
            ParentDefinitionType = null;
            ChildDefinitionTypes = null;
            NameAutoGenerate = null;
            NameCasingConvention = null;
            NamePrefixConvention = null;
            ShortFormAutoGenerate = null;
            ShortFormPrefixConvention = null;
        }

        private TestApp.Commands.EnumerableCliCommand CreateInstance()
        {
            return new TestApp.Commands.EnumerableCliCommand();
        }

        /// <inheritdoc />
        public override System.CommandLine.Command Build()
        {
            var namer = new DotMake.CommandLine.CliNamer
            (
                NameAutoGenerate,
                NameCasingConvention,
                NamePrefixConvention,
                ShortFormAutoGenerate,
                ShortFormPrefixConvention
            );

            // Command for 'EnumerableCliCommand' class
            var commandName = namer.GetCommandName("Enumerable", false);
            var command = IsRoot
                ? new System.CommandLine.RootCommand()
                : new System.CommandLine.Command(commandName);
            var rootCommand = command as System.CommandLine.RootCommand;
            namer.AddShortFormAlias(command, commandName, false);

            // Option for 'OptEnumerable' property
            var option0Name = namer.GetOptionName("OptEnumerable", false);
            var option0 = new System.CommandLine.Option<System.Collections.Generic.IEnumerable<int>>
            (
                option0Name
            )
            {
                Required = false,
                CustomParser = GetArgumentParser<System.Collections.Generic.IEnumerable<int>, int>
                (
                    array => (int[])array,
                    null
                ),
            };
            namer.AddShortFormAlias(option0, option0Name, false);
            command.Add(option0);

            // Option for 'OptList' property
            var option1Name = namer.GetOptionName("OptList", false);
            var option1 = new System.CommandLine.Option<System.Collections.Generic.List<string>>
            (
                option1Name
            )
            {
                Required = false,
                CustomParser = GetArgumentParser<System.Collections.Generic.List<string>, string>
                (
                    array => new System.Collections.Generic.List<string>((string[])array),
                    null
                ),
            };
            namer.AddShortFormAlias(option1, option1Name, false);
            command.Add(option1);

            // Option for 'OptEnumArray' property
            var option2Name = namer.GetOptionName("OptEnumArray", false);
            var option2 = new System.CommandLine.Option<System.IO.FileAccess[]>
            (
                option2Name
            )
            {
                AllowMultipleArgumentsPerToken = true,
                Required = false,
                CustomParser = GetArgumentParser<System.IO.FileAccess[], System.IO.FileAccess>
                (
                    array => (System.IO.FileAccess[])array,
                    null
                ),
            };
            namer.AddShortFormAlias(option2, option2Name, false);
            command.Add(option2);

            // Option for 'OptCollection' property
            var option3Name = namer.GetOptionName("OptCollection", false);
            var option3 = new System.CommandLine.Option<System.Collections.ObjectModel.Collection<int?>>
            (
                option3Name
            )
            {
                Required = false,
                CustomParser = GetArgumentParser<System.Collections.ObjectModel.Collection<int?>, int?>
                (
                    array => new System.Collections.ObjectModel.Collection<int?>(System.Linq.Enumerable.ToList((int?[])array)),
                    null
                ),
            };
            namer.AddShortFormAlias(option3, option3Name, false);
            command.Add(option3);

            // Option for 'OptHashSet' property
            var option4Name = namer.GetOptionName("OptHashSet", false);
            var option4 = new System.CommandLine.Option<System.Collections.Generic.HashSet<string>>
            (
                option4Name
            )
            {
                Required = false,
                CustomParser = GetArgumentParser<System.Collections.Generic.HashSet<string>, string>
                (
                    array => new System.Collections.Generic.HashSet<string>((string[])array),
                    null
                ),
            };
            namer.AddShortFormAlias(option4, option4Name, false);
            command.Add(option4);

            // Option for 'OptQueue' property
            var option5Name = namer.GetOptionName("OptQueue", false);
            var option5 = new System.CommandLine.Option<System.Collections.Generic.Queue<System.IO.FileInfo>>
            (
                option5Name
            )
            {
                Required = false,
                CustomParser = GetArgumentParser<System.Collections.Generic.Queue<System.IO.FileInfo>, System.IO.FileInfo>
                (
                    array => new System.Collections.Generic.Queue<System.IO.FileInfo>((System.IO.FileInfo[])array),
                    null
                ),
            };
            namer.AddShortFormAlias(option5, option5Name, false);
            command.Add(option5);

            // Option for 'OptCustomList' property
            var option6Name = namer.GetOptionName("OptCustomList", false);
            var option6 = new System.CommandLine.Option<TestApp.Commands.CustomList<string>>
            (
                option6Name
            )
            {
                Required = false,
                CustomParser = GetArgumentParser<TestApp.Commands.CustomList<string>, string>
                (
                    array => new TestApp.Commands.CustomList<string>((string[])array),
                    null
                ),
            };
            namer.AddShortFormAlias(option6, option6Name, false);
            command.Add(option6);

            // Argument for 'ArgIList' property
            var argument0Name = namer.GetArgumentName("ArgIList", false);
            var argument0 = new System.CommandLine.Argument<System.Collections.IList>
            (
                argument0Name
            )
            {
                CustomParser = GetArgumentParser<System.Collections.IList, string>
                (
                    array => (string[])array,
                    null
                ),
            };
            argument0.Arity = System.CommandLine.ArgumentArity.OneOrMore;
            command.Add(argument0);

            Binder = (parseResult) =>
            {
                var targetClass = CreateInstance();

                //  Set the parsed or default values for the directives

                //  Set the parsed or default values for the options
                targetClass.OptEnumerable = GetValueForOption(parseResult, option0);
                targetClass.OptList = GetValueForOption(parseResult, option1);
                targetClass.OptEnumArray = GetValueForOption(parseResult, option2);
                targetClass.OptCollection = GetValueForOption(parseResult, option3);
                targetClass.OptHashSet = GetValueForOption(parseResult, option4);
                targetClass.OptQueue = GetValueForOption(parseResult, option5);
                targetClass.OptCustomList = GetValueForOption(parseResult, option6);

                //  Set the parsed or default values for the arguments
                targetClass.ArgIList = GetValueForArgument(parseResult, argument0);

                //  Set the values for the parent command accessors

                return targetClass;
            };

            command.SetAction(parseResult =>
            {
                var targetClass = (TestApp.Commands.EnumerableCliCommand) Bind(parseResult);

                //  Call the command handler
                var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                var exitCode = 0;
                targetClass.Run(cliContext);

                return exitCode;
            });

            return command;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.GeneratedCode.EnumerableCliCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }
    }
}
