// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v2.6.6.0
// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.27905
// Generation: 1

namespace TestApp.Commands.GeneratedCode
{
    /// <inheritdoc />
    public class EnumerableCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public EnumerableCliCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.EnumerableCliCommand);
            ParentDefinitionType = null;
            ChildDefinitionTypes = null;
            NameAutoGenerate = null;
            NameCasingConvention = null;
            NamePrefixConvention = null;
            ShortFormAutoGenerate = null;
            ShortFormPrefixConvention = null;
        }

        /// <inheritdoc />
        protected override System.CommandLine.Command DoBuild(DotMake.CommandLine.CliBindingContext bindingContext)
        {
            // Command for 'EnumerableCliCommand' class
            var commandName = Namer.GetCommandName("EnumerableCliCommand");
            var command = IsRoot
                ? new System.CommandLine.RootCommand()
                : new System.CommandLine.Command(commandName);
            var rootCommand = command as System.CommandLine.RootCommand;
            Namer.AddShortFormAlias(command, "EnumerableCliCommand");

            // Option for 'OptEnumerable' property
            var option0Name = Namer.GetOptionName("OptEnumerable");
            var option0 = new System.CommandLine.Option<System.Collections.Generic.IEnumerable<int>>
            (
                option0Name
            )
            {
                Required = false,
                CustomParser = bindingContext.GetArgumentParser<System.Collections.Generic.IEnumerable<int>, int>
                (
                    array => (int[])array,
                    null
                ),
            };
            Namer.AddShortFormAlias(option0, "OptEnumerable");
            command.Add(option0);

            // Option for 'OptList' property
            var option1Name = Namer.GetOptionName("OptList");
            var option1 = new System.CommandLine.Option<System.Collections.Generic.List<string>>
            (
                option1Name
            )
            {
                Required = false,
                CustomParser = bindingContext.GetArgumentParser<System.Collections.Generic.List<string>, string>
                (
                    array => new System.Collections.Generic.List<string>((string[])array),
                    null
                ),
            };
            Namer.AddShortFormAlias(option1, "OptList");
            command.Add(option1);

            // Option for 'OptEnumArray' property
            var option2Name = Namer.GetOptionName("OptEnumArray");
            var option2 = new System.CommandLine.Option<System.IO.FileAccess[]>
            (
                option2Name
            )
            {
                AllowMultipleArgumentsPerToken = true,
                Required = false,
                CustomParser = bindingContext.GetArgumentParser<System.IO.FileAccess[], System.IO.FileAccess>
                (
                    array => (System.IO.FileAccess[])array,
                    null
                ),
            };
            Namer.AddShortFormAlias(option2, "OptEnumArray");
            command.Add(option2);

            // Option for 'OptCollection' property
            var option3Name = Namer.GetOptionName("OptCollection");
            var option3 = new System.CommandLine.Option<System.Collections.ObjectModel.Collection<int?>>
            (
                option3Name
            )
            {
                Required = false,
                CustomParser = bindingContext.GetArgumentParser<System.Collections.ObjectModel.Collection<int?>, int?>
                (
                    array => new System.Collections.ObjectModel.Collection<int?>(System.Linq.Enumerable.ToList((int?[])array)),
                    null
                ),
            };
            Namer.AddShortFormAlias(option3, "OptCollection");
            command.Add(option3);

            // Option for 'OptHashSet' property
            var option4Name = Namer.GetOptionName("OptHashSet");
            var option4 = new System.CommandLine.Option<System.Collections.Generic.HashSet<string>>
            (
                option4Name
            )
            {
                Required = false,
                CustomParser = bindingContext.GetArgumentParser<System.Collections.Generic.HashSet<string>, string>
                (
                    array => new System.Collections.Generic.HashSet<string>((string[])array),
                    null
                ),
            };
            Namer.AddShortFormAlias(option4, "OptHashSet");
            command.Add(option4);

            // Option for 'OptQueue' property
            var option5Name = Namer.GetOptionName("OptQueue");
            var option5 = new System.CommandLine.Option<System.Collections.Generic.Queue<System.IO.FileInfo>>
            (
                option5Name
            )
            {
                Required = false,
                CustomParser = bindingContext.GetArgumentParser<System.Collections.Generic.Queue<System.IO.FileInfo>, System.IO.FileInfo>
                (
                    array => new System.Collections.Generic.Queue<System.IO.FileInfo>((System.IO.FileInfo[])array),
                    null
                ),
            };
            Namer.AddShortFormAlias(option5, "OptQueue");
            command.Add(option5);

            // Option for 'OptCustomList' property
            var option6Name = Namer.GetOptionName("OptCustomList");
            var option6 = new System.CommandLine.Option<TestApp.Commands.CustomList<string>>
            (
                option6Name
            )
            {
                Required = false,
                CustomParser = bindingContext.GetArgumentParser<TestApp.Commands.CustomList<string>, string>
                (
                    array => new TestApp.Commands.CustomList<string>((string[])array),
                    null
                ),
            };
            Namer.AddShortFormAlias(option6, "OptCustomList");
            command.Add(option6);

            // Argument for 'ArgIList' property
            var argument0Name = Namer.GetArgumentName("ArgIList");
            var argument0 = new System.CommandLine.Argument<System.Collections.IList>
            (
                argument0Name
            )
            {
                CustomParser = bindingContext.GetArgumentParser<System.Collections.IList, string>
                (
                    array => (string[])array,
                    null
                ),
            };
            argument0.Arity = System.CommandLine.ArgumentArity.OneOrMore;
            command.Add(argument0);

            bindingContext.CommandMap[command] = DefinitionType;
            bindingContext.CreatorMap[DefinitionType] = () =>
            {
                return new TestApp.Commands.EnumerableCliCommand();
            };
            bindingContext.BinderMap[DefinitionType] = (instance, parseResult) =>
            {
                var definitionInstance = (TestApp.Commands.EnumerableCliCommand)instance;

                // Set the values for the command accessors

                // Set the parsed or default values for the directives

                // Set the parsed or default values for the options
                definitionInstance.OptEnumerable = bindingContext.GetValue(parseResult, option0);
                definitionInstance.OptList = bindingContext.GetValue(parseResult, option1);
                definitionInstance.OptEnumArray = bindingContext.GetValue(parseResult, option2);
                definitionInstance.OptCollection = bindingContext.GetValue(parseResult, option3);
                definitionInstance.OptHashSet = bindingContext.GetValue(parseResult, option4);
                definitionInstance.OptQueue = bindingContext.GetValue(parseResult, option5);
                definitionInstance.OptCustomList = bindingContext.GetValue(parseResult, option6);

                // Set the parsed or default values for the arguments
                definitionInstance.ArgIList = bindingContext.GetValue(parseResult, argument0);
            };

            command.SetAction(parseResult =>
            {
                var definitionInstance = bindingContext.Bind<TestApp.Commands.EnumerableCliCommand>(parseResult);

                // Call the command handler
                var cliContext = new DotMake.CommandLine.CliContext(bindingContext, parseResult);
                var exitCode = 0;
                definitionInstance.Run(cliContext);

                return exitCode;
            });

            return command;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.GeneratedCode.EnumerableCliCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }
    }
}
