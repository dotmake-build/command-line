// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v2.5.0.0
// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.27905
// Generation: 1

namespace TestApp.Commands.GeneratedCode
{
    /// <inheritdoc />
    public class ShortFormCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public ShortFormCliCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.ShortFormCliCommand);
            ParentDefinitionType = null;
            ChildDefinitionTypes = null;
            NameAutoGenerate = null;
            NameCasingConvention = null;
            NamePrefixConvention = null;
            ShortFormAutoGenerate = null;
            ShortFormPrefixConvention = null;
        }

        private TestApp.Commands.ShortFormCliCommand CreateInstance()
        {
            return new TestApp.Commands.ShortFormCliCommand();
        }

        /// <inheritdoc />
        public override System.CommandLine.Command Build()
        {
            var namer = new DotMake.CommandLine.CliNamer
            (
                NameAutoGenerate,
                NameCasingConvention,
                NamePrefixConvention,
                ShortFormAutoGenerate,
                ShortFormPrefixConvention
            );

            // Command for 'ShortFormCliCommand' class
            var commandName = namer.GetCommandName("ShortForm", false);
            var command = IsRoot
                ? new System.CommandLine.RootCommand()
                : new System.CommandLine.Command(commandName);
            var rootCommand = command as System.CommandLine.RootCommand;
            namer.AddShortFormAlias(command, commandName, false);

            // Option for 'Oauth2GrantType' property
            var option0Name = namer.GetOptionName("Oauth2GrantType", false);
            var option0 = new System.CommandLine.Option<string>
            (
                option0Name
            )
            {
                Required = false,
                DefaultValueFactory = _ => "",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            namer.AddShortFormAlias(option0, "o2", true);
            command.Add(option0);

            // Option for 'Oauth2TokenUrl' property
            var option1Name = namer.GetOptionName("Oauth2TokenUrl", false);
            var option1 = new System.CommandLine.Option<string>
            (
                option1Name
            )
            {
                Required = false,
                DefaultValueFactory = _ => "",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            namer.AddShortFormAlias(option1, option1Name, false);
            command.Add(option1);

            // Option for 'Oauth2ClientId' property
            var option2Name = namer.GetOptionName("Oauth2ClientId", false);
            var option2 = new System.CommandLine.Option<string>
            (
                option2Name
            )
            {
                Required = false,
                DefaultValueFactory = _ => "",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            namer.AddShortFormAlias(option2, option2Name, false);
            command.Add(option2);

            // Option for 'Oauth2ClientSecret' property
            var option3Name = namer.GetOptionName("Oauth2ClientSecret", false);
            var option3 = new System.CommandLine.Option<string>
            (
                option3Name
            )
            {
                Required = false,
                DefaultValueFactory = _ => "",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            namer.AddShortFormAlias(option3, option3Name, false);
            command.Add(option3);

            // Option for 'Sha256' property
            var option4Name = namer.GetOptionName("Sha256", false);
            var option4 = new System.CommandLine.Option<string>
            (
                option4Name
            )
            {
                Required = false,
                DefaultValueFactory = _ => "",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            namer.AddShortFormAlias(option4, option4Name, false);
            command.Add(option4);

            // Option for 'Option1' property
            var option5Name = namer.GetOptionName("Option1", false);
            var option5 = new System.CommandLine.Option<string>
            (
                option5Name
            )
            {
                Required = false,
                DefaultValueFactory = _ => "",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            namer.AddShortFormAlias(option5, option5Name, false);
            namer.AddAlias(option5, "opt1");
            command.Add(option5);

            // Option for 'Option1Option' property
            var option6Name = namer.GetOptionName("Option1", false);
            var option6 = new System.CommandLine.Option<string>
            (
                option6Name
            )
            {
                Required = false,
                DefaultValueFactory = _ => "",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            namer.AddShortFormAlias(option6, option6Name, false);
            command.Add(option6);

            // Option for 'Option2' property
            var option7Name = namer.GetOptionName("Option2", false);
            var option7 = new System.CommandLine.Option<string>
            (
                option7Name
            )
            {
                Required = false,
                DefaultValueFactory = _ => "",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            namer.AddShortFormAlias(option7, "-o2", true);
            namer.AddAlias(option7, "/opt2");
            command.Add(option7);

            // Option for 'Option3' property
            var option8Name = namer.GetOptionName("opt3", true);
            var option8 = new System.CommandLine.Option<string>
            (
                option8Name
            )
            {
                Required = false,
                DefaultValueFactory = _ => "",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            namer.AddShortFormAlias(option8, "/opt3", true);
            namer.AddAlias(option8, "-opt3");
            command.Add(option8);

            // Argument for 'Argument1' property
            var argument0Name = namer.GetArgumentName("Argument1", false);
            var argument0 = new System.CommandLine.Argument<string>
            (
                argument0Name
            )
            {
                DefaultValueFactory = _ => "",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            command.Add(argument0);

            // Argument for 'Argument1Argument' property
            var argument1Name = namer.GetArgumentName("Argument1", false);
            var argument1 = new System.CommandLine.Argument<string>
            (
                argument1Name
            )
            {
                DefaultValueFactory = _ => "",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            command.Add(argument1);

            // Argument for 'Option1Argument' property
            var argument2Name = namer.GetArgumentName("Option1", false);
            var argument2 = new System.CommandLine.Argument<string>
            (
                argument2Name
            )
            {
                DefaultValueFactory = _ => "",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            command.Add(argument2);

            Binder = (parseResult) =>
            {
                var targetClass = CreateInstance();

                //  Set the parsed or default values for the directives

                //  Set the parsed or default values for the options
                targetClass.Oauth2GrantType = GetValueForOption(parseResult, option0);
                targetClass.Oauth2TokenUrl = GetValueForOption(parseResult, option1);
                targetClass.Oauth2ClientId = GetValueForOption(parseResult, option2);
                targetClass.Oauth2ClientSecret = GetValueForOption(parseResult, option3);
                targetClass.Sha256 = GetValueForOption(parseResult, option4);
                targetClass.Option1 = GetValueForOption(parseResult, option5);
                targetClass.Option1Option = GetValueForOption(parseResult, option6);
                targetClass.Option2 = GetValueForOption(parseResult, option7);
                targetClass.Option3 = GetValueForOption(parseResult, option8);

                //  Set the parsed or default values for the arguments
                targetClass.Argument1 = GetValueForArgument(parseResult, argument0);
                targetClass.Argument1Argument = GetValueForArgument(parseResult, argument1);
                targetClass.Option1Argument = GetValueForArgument(parseResult, argument2);

                //  Set the values for the parent command accessors

                return targetClass;
            };

            command.SetAction(parseResult =>
            {
                var targetClass = (TestApp.Commands.ShortFormCliCommand) Bind(parseResult);

                //  Call the command handler
                var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                var exitCode = 0;
                targetClass.Run(cliContext);

                return exitCode;
            });

            return command;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.GeneratedCode.ShortFormCliCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }

        /// <inheritdoc />
        public class TestCommandBuilder : DotMake.CommandLine.CliCommandBuilder
        {
            /// <inheritdoc />
            public TestCommandBuilder()
            {
                DefinitionType = typeof(TestApp.Commands.ShortFormCliCommand.TestCommand);
                ParentDefinitionType = typeof(TestApp.Commands.ShortFormCliCommand);
                ChildDefinitionTypes = null;
                NameAutoGenerate = null;
                NameCasingConvention = null;
                NamePrefixConvention = null;
                ShortFormAutoGenerate = null;
                ShortFormPrefixConvention = null;
            }

            private TestApp.Commands.ShortFormCliCommand.TestCommand CreateInstance()
            {
                return new TestApp.Commands.ShortFormCliCommand.TestCommand();
            }

            /// <inheritdoc />
            public override System.CommandLine.Command Build()
            {
                var namer = new DotMake.CommandLine.CliNamer
                (
                    NameAutoGenerate,
                    NameCasingConvention,
                    NamePrefixConvention,
                    ShortFormAutoGenerate,
                    ShortFormPrefixConvention
                );

                // Command for 'TestCommand' class
                var commandName = namer.GetCommandName("Test", false);
                var command = IsRoot
                    ? new System.CommandLine.RootCommand()
                    : new System.CommandLine.Command(commandName);
                var rootCommand = command as System.CommandLine.RootCommand;
                namer.AddShortFormAlias(command, commandName, false);

                Binder = (parseResult) =>
                {
                    var targetClass = CreateInstance();

                    //  Set the parsed or default values for the directives

                    //  Set the parsed or default values for the options

                    //  Set the parsed or default values for the arguments

                    //  Set the values for the parent command accessors

                    return targetClass;
                };

                command.SetAction(parseResult =>
                {
                    var targetClass = (TestApp.Commands.ShortFormCliCommand.TestCommand) Bind(parseResult);

                    //  Call the command handler
                    var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                    var exitCode = 0;
                    cliContext.ShowHelp();

                    return exitCode;
                });

                return command;
            }

            [System.Runtime.CompilerServices.ModuleInitializerAttribute]
            internal static void Initialize()
            {
                var commandBuilder = new TestApp.Commands.GeneratedCode.ShortFormCliCommandBuilder.TestCommandBuilder();

                // Register this command builder so that it can be found by the definition class
                // and it can be found by the parent definition class if it's a nested/external child.
                commandBuilder.Register();
            }
        }

        /// <inheritdoc />
        public class Option1CommandBuilder : DotMake.CommandLine.CliCommandBuilder
        {
            /// <inheritdoc />
            public Option1CommandBuilder()
            {
                DefinitionType = typeof(TestApp.Commands.ShortFormCliCommand.Option1Command);
                ParentDefinitionType = typeof(TestApp.Commands.ShortFormCliCommand);
                ChildDefinitionTypes = null;
                NameAutoGenerate = null;
                NameCasingConvention = null;
                NamePrefixConvention = null;
                ShortFormAutoGenerate = null;
                ShortFormPrefixConvention = null;
            }

            private TestApp.Commands.ShortFormCliCommand.Option1Command CreateInstance()
            {
                return new TestApp.Commands.ShortFormCliCommand.Option1Command();
            }

            /// <inheritdoc />
            public override System.CommandLine.Command Build()
            {
                var namer = new DotMake.CommandLine.CliNamer
                (
                    NameAutoGenerate,
                    NameCasingConvention,
                    NamePrefixConvention,
                    ShortFormAutoGenerate,
                    ShortFormPrefixConvention
                );

                // Command for 'Option1Command' class
                var commandName = namer.GetCommandName("Option1", false);
                var command = IsRoot
                    ? new System.CommandLine.RootCommand()
                    : new System.CommandLine.Command(commandName);
                var rootCommand = command as System.CommandLine.RootCommand;
                namer.AddShortFormAlias(command, commandName, false);
                namer.AddAlias(command, "op1");

                Binder = (parseResult) =>
                {
                    var targetClass = CreateInstance();

                    //  Set the parsed or default values for the directives

                    //  Set the parsed or default values for the options

                    //  Set the parsed or default values for the arguments

                    //  Set the values for the parent command accessors

                    return targetClass;
                };

                command.SetAction(parseResult =>
                {
                    var targetClass = (TestApp.Commands.ShortFormCliCommand.Option1Command) Bind(parseResult);

                    //  Call the command handler
                    var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                    var exitCode = 0;
                    cliContext.ShowHelp();

                    return exitCode;
                });

                return command;
            }

            [System.Runtime.CompilerServices.ModuleInitializerAttribute]
            internal static void Initialize()
            {
                var commandBuilder = new TestApp.Commands.GeneratedCode.ShortFormCliCommandBuilder.Option1CommandBuilder();

                // Register this command builder so that it can be found by the definition class
                // and it can be found by the parent definition class if it's a nested/external child.
                commandBuilder.Register();
            }
        }

        /// <inheritdoc />
        public class CliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
        {
            /// <inheritdoc />
            public CliCommandBuilder()
            {
                DefinitionType = typeof(TestApp.Commands.ShortFormCliCommand.CliCommand);
                ParentDefinitionType = typeof(TestApp.Commands.ShortFormCliCommand);
                ChildDefinitionTypes = null;
                NameAutoGenerate = null;
                NameCasingConvention = null;
                NamePrefixConvention = null;
                ShortFormAutoGenerate = null;
                ShortFormPrefixConvention = null;
            }

            private TestApp.Commands.ShortFormCliCommand.CliCommand CreateInstance()
            {
                return new TestApp.Commands.ShortFormCliCommand.CliCommand();
            }

            /// <inheritdoc />
            public override System.CommandLine.Command Build()
            {
                var namer = new DotMake.CommandLine.CliNamer
                (
                    NameAutoGenerate,
                    NameCasingConvention,
                    NamePrefixConvention,
                    ShortFormAutoGenerate,
                    ShortFormPrefixConvention
                );

                // Command for 'CliCommand' class
                var commandName = namer.GetCommandName("cmd", true);
                var command = IsRoot
                    ? new System.CommandLine.RootCommand()
                    : new System.CommandLine.Command(commandName);
                var rootCommand = command as System.CommandLine.RootCommand;
                namer.AddShortFormAlias(command, "cl", true);

                Binder = (parseResult) =>
                {
                    var targetClass = CreateInstance();

                    //  Set the parsed or default values for the directives

                    //  Set the parsed or default values for the options

                    //  Set the parsed or default values for the arguments

                    //  Set the values for the parent command accessors

                    return targetClass;
                };

                command.SetAction(parseResult =>
                {
                    var targetClass = (TestApp.Commands.ShortFormCliCommand.CliCommand) Bind(parseResult);

                    //  Call the command handler
                    var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                    var exitCode = 0;
                    cliContext.ShowHelp();

                    return exitCode;
                });

                return command;
            }

            [System.Runtime.CompilerServices.ModuleInitializerAttribute]
            internal static void Initialize()
            {
                var commandBuilder = new TestApp.Commands.GeneratedCode.ShortFormCliCommandBuilder.CliCommandBuilder();

                // Register this command builder so that it can be found by the definition class
                // and it can be found by the parent definition class if it's a nested/external child.
                commandBuilder.Register();
            }
        }
    }
}
