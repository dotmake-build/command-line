// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v2.7.1.0
// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.35903
// Generation: 1

namespace TestApp.Commands.GeneratedCode
{
    /// <inheritdoc />
    public class WriteFileCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public WriteFileCliCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.WriteFileCliCommand);
            ParentDefinitionType = null;
            ChildDefinitionTypes = null;
            NameAutoGenerate = null;
            NameCasingConvention = null;
            NamePrefixConvention = null;
            ShortFormAutoGenerate = null;
            ShortFormPrefixConvention = null;
        }

        /// <inheritdoc />
        protected override System.CommandLine.Command DoBuild(DotMake.CommandLine.CliBindingContext bindingContext)
        {
            // Command for 'WriteFileCliCommand' class
            var command = IsRoot
                ? new System.CommandLine.RootCommand()
                : new System.CommandLine.Command
                (
                    Namer.GetCommandName("WriteFileCliCommand")
                );
            var rootCommand = command as System.CommandLine.RootCommand;
            Namer.AddShortFormAlias(command, "WriteFileCliCommand");

            // Option for 'Lines' property
            var option0 = new System.CommandLine.Option<System.Collections.Generic.List<string>>
            (
                Namer.GetOptionName("Lines")
            )
            {
                Required = true,
                CustomParser = bindingContext.GetArgumentParser<System.Collections.Generic.List<string>, string>
                (
                    array => new System.Collections.Generic.List<string>((string[])array),
                    null
                ),
            };
            Namer.AddShortFormAlias(option0, "Lines");
            command.Add(option0);

            // Argument for 'OutputFile' property
            var argument0 = new System.CommandLine.Argument<System.IO.FileInfo>
            (
                Namer.GetArgumentName("OutputFile")
            )
            {
                CustomParser = bindingContext.GetArgumentParser<System.IO.FileInfo>
                (
                    null
                ),
            };
            command.Add(argument0);

            bindingContext.CommandMap[command] = DefinitionType;
            bindingContext.CreatorMap[DefinitionType] = () =>
            {
                return new TestApp.Commands.WriteFileCliCommand();
            };
            bindingContext.BinderMap[DefinitionType] = (instance, parseResult) =>
            {
                var definitionInstance = (TestApp.Commands.WriteFileCliCommand)instance;

                // Set the values for the command accessors

                // Set the parsed or default values for the directives

                // Set the parsed or default values for the options
                definitionInstance.Lines = bindingContext.GetValue(parseResult, option0);

                // Set the parsed or default values for the arguments
                definitionInstance.OutputFile = bindingContext.GetValue(parseResult, argument0);
            };

            command.SetAction(parseResult =>
            {
                var definitionInstance = bindingContext.Bind<TestApp.Commands.WriteFileCliCommand>(parseResult);

                // Call the command handler
                var cliContext = new DotMake.CommandLine.CliContext(bindingContext, parseResult);
                var exitCode = 0;
                definitionInstance.Run();

                return exitCode;
            });

            return command;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.GeneratedCode.WriteFileCliCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }
    }
}
