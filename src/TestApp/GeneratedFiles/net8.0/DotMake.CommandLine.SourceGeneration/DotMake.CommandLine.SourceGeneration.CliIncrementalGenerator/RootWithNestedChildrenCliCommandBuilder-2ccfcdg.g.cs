// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v2.6.7.0
// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.27905
// Generation: 1

namespace TestApp.Commands.GeneratedCode
{
    /// <inheritdoc />
    public class RootWithNestedChildrenCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public RootWithNestedChildrenCliCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.RootWithNestedChildrenCliCommand);
            ParentDefinitionType = null;
            ChildDefinitionTypes = null;
            NameAutoGenerate = null;
            NameCasingConvention = null;
            NamePrefixConvention = null;
            ShortFormAutoGenerate = null;
            ShortFormPrefixConvention = null;
        }

        /// <inheritdoc />
        protected override System.CommandLine.Command DoBuild(DotMake.CommandLine.CliBindingContext bindingContext)
        {
            // Command for 'RootWithNestedChildrenCliCommand' class
            var commandName = Namer.GetCommandName("RootWithNestedChildrenCliCommand");
            var command = IsRoot
                ? new System.CommandLine.RootCommand()
                : new System.CommandLine.Command(commandName);
            var rootCommand = command as System.CommandLine.RootCommand;
            command.Description = "A root cli command with nested children";
            Namer.AddShortFormAlias(command, "RootWithNestedChildrenCliCommand");

            // Option for 'Option1' property
            var option0Name = Namer.GetOptionName("Option1");
            var option0 = new System.CommandLine.Option<string>
            (
                option0Name
            )
            {
                Description = "Description for Option1",
                Required = false,
                DefaultValueFactory = _ => "DefaultForOption1",
                CustomParser = bindingContext.GetArgumentParser<string>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option0, "Option1");
            command.Add(option0);

            // Argument for 'Argument1' property
            var argument0Name = Namer.GetArgumentName("Argument1");
            var argument0 = new System.CommandLine.Argument<string>
            (
                argument0Name
            )
            {
                Description = "Description for Argument1",
                DefaultValueFactory = _ => "DefaultForArgument1",
                CustomParser = bindingContext.GetArgumentParser<string>
                (
                    null
                ),
            };
            command.Add(argument0);

            bindingContext.CommandMap[command] = DefinitionType;
            bindingContext.CreatorMap[DefinitionType] = () =>
            {
                return new TestApp.Commands.RootWithNestedChildrenCliCommand();
            };
            bindingContext.BinderMap[DefinitionType] = (instance, parseResult) =>
            {
                var definitionInstance = (TestApp.Commands.RootWithNestedChildrenCliCommand)instance;

                // Set the values for the command accessors

                // Set the parsed or default values for the directives

                // Set the parsed or default values for the options
                definitionInstance.Option1 = bindingContext.GetValue(parseResult, option0);

                // Set the parsed or default values for the arguments
                definitionInstance.Argument1 = bindingContext.GetValue(parseResult, argument0);
            };

            command.SetAction(parseResult =>
            {
                var definitionInstance = bindingContext.Bind<TestApp.Commands.RootWithNestedChildrenCliCommand>(parseResult);

                // Call the command handler
                var cliContext = new DotMake.CommandLine.CliContext(bindingContext, parseResult);
                var exitCode = 0;
                definitionInstance.Run(cliContext);

                return exitCode;
            });

            return command;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.GeneratedCode.RootWithNestedChildrenCliCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }

        /// <inheritdoc />
        public class Level1SubCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
        {
            /// <inheritdoc />
            public Level1SubCliCommandBuilder()
            {
                DefinitionType = typeof(TestApp.Commands.RootWithNestedChildrenCliCommand.Level1SubCliCommand);
                ParentDefinitionType = typeof(TestApp.Commands.RootWithNestedChildrenCliCommand);
                ChildDefinitionTypes = null;
                NameAutoGenerate = null;
                NameCasingConvention = null;
                NamePrefixConvention = null;
                ShortFormAutoGenerate = null;
                ShortFormPrefixConvention = null;
            }

            /// <inheritdoc />
            protected override System.CommandLine.Command DoBuild(DotMake.CommandLine.CliBindingContext bindingContext)
            {
                // Command for 'Level1SubCliCommand' class
                var commandName = Namer.GetCommandName("Level1SubCliCommand");
                var command = IsRoot
                    ? new System.CommandLine.RootCommand()
                    : new System.CommandLine.Command(commandName);
                var rootCommand = command as System.CommandLine.RootCommand;
                command.Description = "A nested level 1 sub-command";
                Namer.AddShortFormAlias(command, "Level1SubCliCommand");

                // Option for 'Option1' property
                var option0Name = Namer.GetOptionName("Option1");
                var option0 = new System.CommandLine.Option<string>
                (
                    option0Name
                )
                {
                    Description = "Description for Option1",
                    Required = false,
                    DefaultValueFactory = _ => "DefaultForOption1",
                    CustomParser = bindingContext.GetArgumentParser<string>
                    (
                        null
                    ),
                };
                Namer.AddShortFormAlias(option0, "Option1");
                command.Add(option0);

                // Argument for 'Argument1' property
                var argument0Name = Namer.GetArgumentName("Argument1");
                var argument0 = new System.CommandLine.Argument<string>
                (
                    argument0Name
                )
                {
                    Description = "Description for Argument1",
                    CustomParser = bindingContext.GetArgumentParser<string>
                    (
                        null
                    ),
                };
                command.Add(argument0);

                bindingContext.CommandMap[command] = DefinitionType;
                bindingContext.CreatorMap[DefinitionType] = () =>
                {
                    return new TestApp.Commands.RootWithNestedChildrenCliCommand.Level1SubCliCommand();
                };
                bindingContext.BinderMap[DefinitionType] = (instance, parseResult) =>
                {
                    var definitionInstance = (TestApp.Commands.RootWithNestedChildrenCliCommand.Level1SubCliCommand)instance;

                    // Set the values for the command accessors

                    // Set the parsed or default values for the directives

                    // Set the parsed or default values for the options
                    definitionInstance.Option1 = bindingContext.GetValue(parseResult, option0);

                    // Set the parsed or default values for the arguments
                    definitionInstance.Argument1 = bindingContext.GetValue(parseResult, argument0);
                };

                command.SetAction(parseResult =>
                {
                    var definitionInstance = bindingContext.Bind<TestApp.Commands.RootWithNestedChildrenCliCommand.Level1SubCliCommand>(parseResult);

                    // Call the command handler
                    var cliContext = new DotMake.CommandLine.CliContext(bindingContext, parseResult);
                    var exitCode = 0;
                    definitionInstance.Run(cliContext);

                    return exitCode;
                });

                return command;
            }

            [System.Runtime.CompilerServices.ModuleInitializerAttribute]
            internal static void Initialize()
            {
                var commandBuilder = new TestApp.Commands.GeneratedCode.RootWithNestedChildrenCliCommandBuilder.Level1SubCliCommandBuilder();

                // Register this command builder so that it can be found by the definition class
                // and it can be found by the parent definition class if it's a nested/external child.
                commandBuilder.Register();
            }

            /// <inheritdoc />
            public class Level2SubCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
            {
                /// <inheritdoc />
                public Level2SubCliCommandBuilder()
                {
                    DefinitionType = typeof(TestApp.Commands.RootWithNestedChildrenCliCommand.Level1SubCliCommand.Level2SubCliCommand);
                    ParentDefinitionType = typeof(TestApp.Commands.RootWithNestedChildrenCliCommand.Level1SubCliCommand);
                    ChildDefinitionTypes = null;
                    NameAutoGenerate = null;
                    NameCasingConvention = null;
                    NamePrefixConvention = null;
                    ShortFormAutoGenerate = null;
                    ShortFormPrefixConvention = null;
                }

                /// <inheritdoc />
                protected override System.CommandLine.Command DoBuild(DotMake.CommandLine.CliBindingContext bindingContext)
                {
                    // Command for 'Level2SubCliCommand' class
                    var commandName = Namer.GetCommandName("Level2SubCliCommand");
                    var command = IsRoot
                        ? new System.CommandLine.RootCommand()
                        : new System.CommandLine.Command(commandName);
                    var rootCommand = command as System.CommandLine.RootCommand;
                    command.Description = "A nested level 2 sub-command";
                    Namer.AddShortFormAlias(command, "Level2SubCliCommand");

                    // Option for 'Option1' property
                    var option0Name = Namer.GetOptionName("Option1");
                    var option0 = new System.CommandLine.Option<string>
                    (
                        option0Name
                    )
                    {
                        Description = "Description for Option1",
                        Required = false,
                        DefaultValueFactory = _ => "DefaultForOption1",
                        CustomParser = bindingContext.GetArgumentParser<string>
                        (
                            null
                        ),
                    };
                    Namer.AddShortFormAlias(option0, "Option1");
                    command.Add(option0);

                    // Argument for 'Argument1' property
                    var argument0Name = Namer.GetArgumentName("Argument1");
                    var argument0 = new System.CommandLine.Argument<string>
                    (
                        argument0Name
                    )
                    {
                        Description = "Description for Argument1",
                        CustomParser = bindingContext.GetArgumentParser<string>
                        (
                            null
                        ),
                    };
                    command.Add(argument0);

                    bindingContext.CommandMap[command] = DefinitionType;
                    bindingContext.CreatorMap[DefinitionType] = () =>
                    {
                        return new TestApp.Commands.RootWithNestedChildrenCliCommand.Level1SubCliCommand.Level2SubCliCommand();
                    };
                    bindingContext.BinderMap[DefinitionType] = (instance, parseResult) =>
                    {
                        var definitionInstance = (TestApp.Commands.RootWithNestedChildrenCliCommand.Level1SubCliCommand.Level2SubCliCommand)instance;

                        // Set the values for the command accessors

                        // Set the parsed or default values for the directives

                        // Set the parsed or default values for the options
                        definitionInstance.Option1 = bindingContext.GetValue(parseResult, option0);

                        // Set the parsed or default values for the arguments
                        definitionInstance.Argument1 = bindingContext.GetValue(parseResult, argument0);
                    };

                    command.SetAction(parseResult =>
                    {
                        var definitionInstance = bindingContext.Bind<TestApp.Commands.RootWithNestedChildrenCliCommand.Level1SubCliCommand.Level2SubCliCommand>(parseResult);

                        // Call the command handler
                        var cliContext = new DotMake.CommandLine.CliContext(bindingContext, parseResult);
                        var exitCode = 0;
                        definitionInstance.Run(cliContext);

                        return exitCode;
                    });

                    return command;
                }

                [System.Runtime.CompilerServices.ModuleInitializerAttribute]
                internal static void Initialize()
                {
                    var commandBuilder = new TestApp.Commands.GeneratedCode.RootWithNestedChildrenCliCommandBuilder.Level1SubCliCommandBuilder.Level2SubCliCommandBuilder();

                    // Register this command builder so that it can be found by the definition class
                    // and it can be found by the parent definition class if it's a nested/external child.
                    commandBuilder.Register();
                }
            }
        }
    }
}
