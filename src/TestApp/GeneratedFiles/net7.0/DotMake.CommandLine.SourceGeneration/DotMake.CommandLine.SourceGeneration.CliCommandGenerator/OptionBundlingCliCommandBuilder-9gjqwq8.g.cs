// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v1.8.8.0
// Roslyn (Microsoft.CodeAnalysis) v4.1000.24.32408
// Generation: 1

namespace TestApp.Commands.GeneratedCode
{
    /// <inheritdoc />
    public class OptionBundlingCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public OptionBundlingCliCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.OptionBundlingCliCommand);
            ParentDefinitionType = null;
            NameCasingConvention = DotMake.CommandLine.CliNameCasingConvention.KebabCase;
            NamePrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.DoubleHyphen;
            ShortFormPrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.SingleHyphen;
            ShortFormAutoGenerate = true;
        }

        private TestApp.Commands.OptionBundlingCliCommand CreateInstance()
        {
            return new TestApp.Commands.OptionBundlingCliCommand();
        }

        /// <inheritdoc />
        public override System.CommandLine.CliCommand Build()
        {
            // Command for 'OptionBundlingCliCommand' class
            var rootCommand = new System.CommandLine.CliRootCommand()
            {
            };

            var defaultClass = CreateInstance();

            // Option for 'A' property
            var option0 = new System.CommandLine.CliOption<bool>
            (
                "-a"
            )
            {
                Required = false,
                DefaultValueFactory = _ => defaultClass.A,
                CustomParser = GetArgumentParser<bool>
                (
                    null
                ),
            };
            rootCommand.Add(option0);

            // Option for 'B' property
            var option1 = new System.CommandLine.CliOption<bool>
            (
                "-b"
            )
            {
                Required = false,
                DefaultValueFactory = _ => defaultClass.B,
                CustomParser = GetArgumentParser<bool>
                (
                    null
                ),
            };
            rootCommand.Add(option1);

            // Option for 'C' property
            var option2 = new System.CommandLine.CliOption<bool>
            (
                "-c"
            )
            {
                Required = false,
                DefaultValueFactory = _ => defaultClass.C,
                CustomParser = GetArgumentParser<bool>
                (
                    null
                ),
            };
            rootCommand.Add(option2);

            // Add nested or external registered children
            foreach (var child in Children)
            {
                rootCommand.Add(child.Build());
            }

            Binder = (parseResult) =>
            {
                var targetClass = CreateInstance();

                //  Set the parsed or default values for the options
                targetClass.A = GetValueForOption(parseResult, option0);
                targetClass.B = GetValueForOption(parseResult, option1);
                targetClass.C = GetValueForOption(parseResult, option2);

                //  Set the parsed or default values for the arguments

                //  Set the values for the parent command accessors

                return targetClass;
            };

            rootCommand.SetAction(parseResult =>
            {
                var targetClass = (TestApp.Commands.OptionBundlingCliCommand) Bind(parseResult);

                //  Call the command handler
                var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                var exitCode = 0;
                targetClass.Run(cliContext);
                return exitCode;
            });

            return rootCommand;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.GeneratedCode.OptionBundlingCliCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }
    }
}
