// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v1.8.5.0
// Roslyn (Microsoft.CodeAnalysis) v4.900.24.12101
// Generation: 1

namespace TestApp.Commands.External.GeneratedCode
{
    /// <inheritdoc />
    public class ExternalLevel2SubCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public ExternalLevel2SubCliCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.External.ExternalLevel2SubCliCommand);
            ParentDefinitionType = typeof(TestApp.Commands.RootWithExternalChildrenCliCommand.Level1SubCliCommand);
            NameCasingConvention = DotMake.CommandLine.CliNameCasingConvention.SnakeCase;
            NamePrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.ForwardSlash;
            ShortFormPrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.ForwardSlash;
            ShortFormAutoGenerate = true;
        }

        private TestApp.Commands.External.ExternalLevel2SubCliCommand CreateInstance()
        {
            return new TestApp.Commands.External.ExternalLevel2SubCliCommand();
        }

        /// <inheritdoc />
        public override System.CommandLine.CliCommand Build()
        {
            // Command for 'ExternalLevel2SubCliCommand' class
            var command = new System.CommandLine.CliCommand("external_level_2")
            {
                Description = "An external level 2 sub-command",
            };

            var defaultClass = CreateInstance();

            // Option for 'Option1' property
            var option0 = new System.CommandLine.CliOption<string>
            (
                "/option_1"
            )
            {
                Description = "Description for Option1",
                Required = false,
                DefaultValueFactory = _ => defaultClass.Option1,
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            option0.Aliases.Add("/o");
            command.Add(option0);

            // Argument for 'Argument1' property
            var argument0 = new System.CommandLine.CliArgument<string>
            (
                "argument_1"
            )
            {
                Description = "Description for Argument1",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            command.Add(argument0);

            // Add nested or external registered children
            foreach (var child in Children)
            {
                command.Add(child.Build());
            }

            BindFunc = (cliBindContext) =>
            {
                var targetClass = CreateInstance();

                //  Set the parsed or default values for the options
                targetClass.Option1 = GetValueForOption(cliBindContext.ParseResult, option0);

                //  Set the parsed or default values for the arguments
                targetClass.Argument1 = GetValueForArgument(cliBindContext.ParseResult, argument0);

                //  Set the values for the parent command references

                return targetClass;
            };

            command.SetAction(parseResult =>
            {
                var cliBindContext = new DotMake.CommandLine.CliBindContext(parseResult);
                var targetClass = (TestApp.Commands.External.ExternalLevel2SubCliCommand) BindFunc(cliBindContext);

                //  Call the command handler
                var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                var exitCode = 0;
                targetClass.Run(cliContext);
                return exitCode;
            });

            return command;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.External.GeneratedCode.ExternalLevel2SubCliCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }

        /// <inheritdoc />
        public class Level3SubCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
        {
            /// <inheritdoc />
            public Level3SubCliCommandBuilder()
            {
                DefinitionType = typeof(TestApp.Commands.External.ExternalLevel2SubCliCommand.Level3SubCliCommand);
                ParentDefinitionType = typeof(TestApp.Commands.External.ExternalLevel2SubCliCommand);
                NameCasingConvention = DotMake.CommandLine.CliNameCasingConvention.SnakeCase;
                NamePrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.ForwardSlash;
                ShortFormPrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.ForwardSlash;
                ShortFormAutoGenerate = true;
            }

            private TestApp.Commands.External.ExternalLevel2SubCliCommand.Level3SubCliCommand CreateInstance()
            {
                return new TestApp.Commands.External.ExternalLevel2SubCliCommand.Level3SubCliCommand();
            }

            /// <inheritdoc />
            public override System.CommandLine.CliCommand Build()
            {
                // Command for 'Level3SubCliCommand' class
                var command = new System.CommandLine.CliCommand("level_3")
                {
                    Description = "A nested level 3 sub-command",
                };

                var defaultClass = CreateInstance();

                // Option for 'Option1' property
                var option0 = new System.CommandLine.CliOption<string>
                (
                    "/option_1"
                )
                {
                    Description = "Description for Option1",
                    Required = false,
                    DefaultValueFactory = _ => defaultClass.Option1,
                    CustomParser = GetArgumentParser<string>
                    (
                        null
                    ),
                };
                option0.Aliases.Add("/o");
                command.Add(option0);

                // Argument for 'Argument1' property
                var argument0 = new System.CommandLine.CliArgument<string>
                (
                    "argument_1"
                )
                {
                    Description = "Description for Argument1",
                    CustomParser = GetArgumentParser<string>
                    (
                        null
                    ),
                };
                command.Add(argument0);

                // Add nested or external registered children
                foreach (var child in Children)
                {
                    command.Add(child.Build());
                }

                BindFunc = (cliBindContext) =>
                {
                    var targetClass = CreateInstance();

                    //  Set the parsed or default values for the options
                    targetClass.Option1 = GetValueForOption(cliBindContext.ParseResult, option0);

                    //  Set the parsed or default values for the arguments
                    targetClass.Argument1 = GetValueForArgument(cliBindContext.ParseResult, argument0);

                    //  Set the values for the parent command references

                    return targetClass;
                };

                command.SetAction(parseResult =>
                {
                    var cliBindContext = new DotMake.CommandLine.CliBindContext(parseResult);
                    var targetClass = (TestApp.Commands.External.ExternalLevel2SubCliCommand.Level3SubCliCommand) BindFunc(cliBindContext);

                    //  Call the command handler
                    var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                    var exitCode = 0;
                    targetClass.Run(cliContext);
                    return exitCode;
                });

                return command;
            }

            [System.Runtime.CompilerServices.ModuleInitializerAttribute]
            internal static void Initialize()
            {
                var commandBuilder = new TestApp.Commands.External.GeneratedCode.ExternalLevel2SubCliCommandBuilder.Level3SubCliCommandBuilder();

                // Register this command builder so that it can be found by the definition class
                // and it can be found by the parent definition class if it's a nested/external child.
                commandBuilder.Register();
            }
        }
    }
}
