// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v2.6.8.0
// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.35903
// Generation: 1

namespace TestApp.Commands.GeneratedCode
{
    /// <inheritdoc />
    public class ShortFormCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public ShortFormCliCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.ShortFormCliCommand);
            ParentDefinitionType = null;
            ChildDefinitionTypes = null;
            NameAutoGenerate = null;
            NameCasingConvention = null;
            NamePrefixConvention = null;
            ShortFormAutoGenerate = null;
            ShortFormPrefixConvention = null;
        }

        /// <inheritdoc />
        protected override System.CommandLine.Command DoBuild(DotMake.CommandLine.CliBindingContext bindingContext)
        {
            // Command for 'ShortFormCliCommand' class
            var command = IsRoot
                ? new System.CommandLine.RootCommand()
                : new System.CommandLine.Command
                (
                    Namer.GetCommandName("ShortFormCliCommand")
                );
            var rootCommand = command as System.CommandLine.RootCommand;
            Namer.AddShortFormAlias(command, "ShortFormCliCommand");

            // Option for 'Oauth2GrantType' property
            var option0 = new System.CommandLine.Option<string>
            (
                Namer.GetOptionName("Oauth2GrantType")
            )
            {
                Required = false,
                DefaultValueFactory = _ => "",
                CustomParser = bindingContext.GetArgumentParser<string>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option0, "Oauth2GrantType", "o2");
            command.Add(option0);

            // Option for 'Oauth2TokenUrl' property
            var option1 = new System.CommandLine.Option<string>
            (
                Namer.GetOptionName("Oauth2TokenUrl")
            )
            {
                Required = false,
                DefaultValueFactory = _ => "",
                CustomParser = bindingContext.GetArgumentParser<string>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option1, "Oauth2TokenUrl");
            command.Add(option1);

            // Option for 'Oauth2ClientId' property
            var option2 = new System.CommandLine.Option<string>
            (
                Namer.GetOptionName("Oauth2ClientId")
            )
            {
                Required = false,
                DefaultValueFactory = _ => "",
                CustomParser = bindingContext.GetArgumentParser<string>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option2, "Oauth2ClientId");
            command.Add(option2);

            // Option for 'Oauth2ClientSecret' property
            var option3 = new System.CommandLine.Option<string>
            (
                Namer.GetOptionName("Oauth2ClientSecret")
            )
            {
                Required = false,
                DefaultValueFactory = _ => "",
                CustomParser = bindingContext.GetArgumentParser<string>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option3, "Oauth2ClientSecret");
            command.Add(option3);

            // Option for 'Sha256' property
            var option4 = new System.CommandLine.Option<string>
            (
                Namer.GetOptionName("Sha256")
            )
            {
                Required = false,
                DefaultValueFactory = _ => "",
                CustomParser = bindingContext.GetArgumentParser<string>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option4, "Sha256");
            command.Add(option4);

            // Option for 'Option1' property
            var option5 = new System.CommandLine.Option<string>
            (
                Namer.GetOptionName("Option1")
            )
            {
                Required = false,
                DefaultValueFactory = _ => "",
                CustomParser = bindingContext.GetArgumentParser<string>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option5, "Option1");
            Namer.AddAlias(option5, "Option1", " ");
            Namer.AddAlias(option5, "Option1", "opt1");
            command.Add(option5);

            // Option for 'Option1Option' property
            var option6 = new System.CommandLine.Option<string>
            (
                Namer.GetOptionName("Option1Option")
            )
            {
                Required = false,
                DefaultValueFactory = _ => "",
                CustomParser = bindingContext.GetArgumentParser<string>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option6, "Option1Option");
            command.Add(option6);

            // Option for 'Option2' property
            var option7 = new System.CommandLine.Option<string>
            (
                Namer.GetOptionName("Option2")
            )
            {
                Required = false,
                DefaultValueFactory = _ => "",
                CustomParser = bindingContext.GetArgumentParser<string>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option7, "Option2", "-o2o");
            Namer.AddAlias(option7, "Option2", "/opt2");
            command.Add(option7);

            // Option for 'Option3' property
            var option8 = new System.CommandLine.Option<string>
            (
                Namer.GetOptionName("Option3", "opt3")
            )
            {
                Required = false,
                DefaultValueFactory = _ => "",
                CustomParser = bindingContext.GetArgumentParser<string>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option8, "Option3", "/opt3");
            Namer.AddAlias(option8, "Option3", "-opt3");
            command.Add(option8);

            // Argument for 'Argument1' property
            var argument0 = new System.CommandLine.Argument<string>
            (
                Namer.GetArgumentName("Argument1")
            )
            {
                DefaultValueFactory = _ => "",
                CustomParser = bindingContext.GetArgumentParser<string>
                (
                    null
                ),
            };
            command.Add(argument0);

            // Argument for 'Argument1Argument' property
            var argument1 = new System.CommandLine.Argument<string>
            (
                Namer.GetArgumentName("Argument1Argument")
            )
            {
                DefaultValueFactory = _ => "",
                CustomParser = bindingContext.GetArgumentParser<string>
                (
                    null
                ),
            };
            command.Add(argument1);

            // Argument for 'Option1Argument' property
            var argument2 = new System.CommandLine.Argument<string>
            (
                Namer.GetArgumentName("Option1Argument")
            )
            {
                DefaultValueFactory = _ => "",
                CustomParser = bindingContext.GetArgumentParser<string>
                (
                    null
                ),
            };
            command.Add(argument2);

            bindingContext.CommandMap[command] = DefinitionType;
            bindingContext.CreatorMap[DefinitionType] = () =>
            {
                return new TestApp.Commands.ShortFormCliCommand();
            };
            bindingContext.BinderMap[DefinitionType] = (instance, parseResult) =>
            {
                var definitionInstance = (TestApp.Commands.ShortFormCliCommand)instance;

                // Set the values for the command accessors

                // Set the parsed or default values for the directives

                // Set the parsed or default values for the options
                definitionInstance.Oauth2GrantType = bindingContext.GetValue(parseResult, option0);
                definitionInstance.Oauth2TokenUrl = bindingContext.GetValue(parseResult, option1);
                definitionInstance.Oauth2ClientId = bindingContext.GetValue(parseResult, option2);
                definitionInstance.Oauth2ClientSecret = bindingContext.GetValue(parseResult, option3);
                definitionInstance.Sha256 = bindingContext.GetValue(parseResult, option4);
                definitionInstance.Option1 = bindingContext.GetValue(parseResult, option5);
                definitionInstance.Option1Option = bindingContext.GetValue(parseResult, option6);
                definitionInstance.Option2 = bindingContext.GetValue(parseResult, option7);
                definitionInstance.Option3 = bindingContext.GetValue(parseResult, option8);

                // Set the parsed or default values for the arguments
                definitionInstance.Argument1 = bindingContext.GetValue(parseResult, argument0);
                definitionInstance.Argument1Argument = bindingContext.GetValue(parseResult, argument1);
                definitionInstance.Option1Argument = bindingContext.GetValue(parseResult, argument2);
            };

            command.SetAction(parseResult =>
            {
                var definitionInstance = bindingContext.Bind<TestApp.Commands.ShortFormCliCommand>(parseResult);

                // Call the command handler
                var cliContext = new DotMake.CommandLine.CliContext(bindingContext, parseResult);
                var exitCode = 0;
                definitionInstance.Run(cliContext);

                return exitCode;
            });

            return command;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.GeneratedCode.ShortFormCliCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }

        /// <inheritdoc />
        public class TestCommandBuilder : DotMake.CommandLine.CliCommandBuilder
        {
            /// <inheritdoc />
            public TestCommandBuilder()
            {
                DefinitionType = typeof(TestApp.Commands.ShortFormCliCommand.TestCommand);
                ParentDefinitionType = typeof(TestApp.Commands.ShortFormCliCommand);
                ChildDefinitionTypes = null;
                NameAutoGenerate = null;
                NameCasingConvention = null;
                NamePrefixConvention = null;
                ShortFormAutoGenerate = null;
                ShortFormPrefixConvention = null;
            }

            /// <inheritdoc />
            protected override System.CommandLine.Command DoBuild(DotMake.CommandLine.CliBindingContext bindingContext)
            {
                // Command for 'TestCommand' class
                var command = IsRoot
                    ? new System.CommandLine.RootCommand()
                    : new System.CommandLine.Command
                    (
                        Namer.GetCommandName("TestCommand")
                    );
                var rootCommand = command as System.CommandLine.RootCommand;
                Namer.AddShortFormAlias(command, "TestCommand");

                bindingContext.CommandMap[command] = DefinitionType;
                bindingContext.CreatorMap[DefinitionType] = () =>
                {
                    return new TestApp.Commands.ShortFormCliCommand.TestCommand();
                };
                bindingContext.BinderMap[DefinitionType] = (instance, parseResult) =>
                {
                    var definitionInstance = (TestApp.Commands.ShortFormCliCommand.TestCommand)instance;

                    // Set the values for the command accessors

                    // Set the parsed or default values for the directives

                    // Set the parsed or default values for the options

                    // Set the parsed or default values for the arguments
                };

                command.SetAction(parseResult =>
                {
                    var definitionInstance = bindingContext.Bind<TestApp.Commands.ShortFormCliCommand.TestCommand>(parseResult);

                    // Call the command handler
                    var cliContext = new DotMake.CommandLine.CliContext(bindingContext, parseResult);
                    var exitCode = 0;
                    cliContext.ShowHelp();

                    return exitCode;
                });

                return command;
            }

            [System.Runtime.CompilerServices.ModuleInitializerAttribute]
            internal static void Initialize()
            {
                var commandBuilder = new TestApp.Commands.GeneratedCode.ShortFormCliCommandBuilder.TestCommandBuilder();

                // Register this command builder so that it can be found by the definition class
                // and it can be found by the parent definition class if it's a nested/external child.
                commandBuilder.Register();
            }

            /// <inheritdoc />
            public class Test2SubCommandBuilder : DotMake.CommandLine.CliCommandBuilder
            {
                /// <inheritdoc />
                public Test2SubCommandBuilder()
                {
                    DefinitionType = typeof(TestApp.Commands.ShortFormCliCommand.TestCommand.Test2SubCommand);
                    ParentDefinitionType = typeof(TestApp.Commands.ShortFormCliCommand.TestCommand);
                    ChildDefinitionTypes = null;
                    NameAutoGenerate = null;
                    NameCasingConvention = null;
                    NamePrefixConvention = null;
                    ShortFormAutoGenerate = null;
                    ShortFormPrefixConvention = null;
                }

                /// <inheritdoc />
                protected override System.CommandLine.Command DoBuild(DotMake.CommandLine.CliBindingContext bindingContext)
                {
                    // Command for 'Test2SubCommand' class
                    var command = IsRoot
                        ? new System.CommandLine.RootCommand()
                        : new System.CommandLine.Command
                        (
                            Namer.GetCommandName("Test2SubCommand")
                        );
                    var rootCommand = command as System.CommandLine.RootCommand;
                    Namer.AddShortFormAlias(command, "Test2SubCommand");

                    bindingContext.CommandMap[command] = DefinitionType;
                    bindingContext.CreatorMap[DefinitionType] = () =>
                    {
                        return new TestApp.Commands.ShortFormCliCommand.TestCommand.Test2SubCommand();
                    };
                    bindingContext.BinderMap[DefinitionType] = (instance, parseResult) =>
                    {
                        var definitionInstance = (TestApp.Commands.ShortFormCliCommand.TestCommand.Test2SubCommand)instance;

                        // Set the values for the command accessors

                        // Set the parsed or default values for the directives

                        // Set the parsed or default values for the options

                        // Set the parsed or default values for the arguments
                    };

                    command.SetAction(parseResult =>
                    {
                        var definitionInstance = bindingContext.Bind<TestApp.Commands.ShortFormCliCommand.TestCommand.Test2SubCommand>(parseResult);

                        // Call the command handler
                        var cliContext = new DotMake.CommandLine.CliContext(bindingContext, parseResult);
                        var exitCode = 0;
                        cliContext.ShowHelp();

                        return exitCode;
                    });

                    return command;
                }

                [System.Runtime.CompilerServices.ModuleInitializerAttribute]
                internal static void Initialize()
                {
                    var commandBuilder = new TestApp.Commands.GeneratedCode.ShortFormCliCommandBuilder.TestCommandBuilder.Test2SubCommandBuilder();

                    // Register this command builder so that it can be found by the definition class
                    // and it can be found by the parent definition class if it's a nested/external child.
                    commandBuilder.Register();
                }
            }
        }

        /// <inheritdoc />
        public class Option1CommandBuilder : DotMake.CommandLine.CliCommandBuilder
        {
            /// <inheritdoc />
            public Option1CommandBuilder()
            {
                DefinitionType = typeof(TestApp.Commands.ShortFormCliCommand.Option1Command);
                ParentDefinitionType = typeof(TestApp.Commands.ShortFormCliCommand);
                ChildDefinitionTypes = null;
                NameAutoGenerate = null;
                NameCasingConvention = null;
                NamePrefixConvention = null;
                ShortFormAutoGenerate = null;
                ShortFormPrefixConvention = null;
            }

            /// <inheritdoc />
            protected override System.CommandLine.Command DoBuild(DotMake.CommandLine.CliBindingContext bindingContext)
            {
                // Command for 'Option1Command' class
                var command = IsRoot
                    ? new System.CommandLine.RootCommand()
                    : new System.CommandLine.Command
                    (
                        Namer.GetCommandName("Option1Command")
                    );
                var rootCommand = command as System.CommandLine.RootCommand;
                Namer.AddShortFormAlias(command, "Option1Command");
                Namer.AddAlias(command, "Option1Command", "op1");

                bindingContext.CommandMap[command] = DefinitionType;
                bindingContext.CreatorMap[DefinitionType] = () =>
                {
                    return new TestApp.Commands.ShortFormCliCommand.Option1Command();
                };
                bindingContext.BinderMap[DefinitionType] = (instance, parseResult) =>
                {
                    var definitionInstance = (TestApp.Commands.ShortFormCliCommand.Option1Command)instance;

                    // Set the values for the command accessors

                    // Set the parsed or default values for the directives

                    // Set the parsed or default values for the options

                    // Set the parsed or default values for the arguments
                };

                command.SetAction(parseResult =>
                {
                    var definitionInstance = bindingContext.Bind<TestApp.Commands.ShortFormCliCommand.Option1Command>(parseResult);

                    // Call the command handler
                    var cliContext = new DotMake.CommandLine.CliContext(bindingContext, parseResult);
                    var exitCode = 0;
                    cliContext.ShowHelp();

                    return exitCode;
                });

                return command;
            }

            [System.Runtime.CompilerServices.ModuleInitializerAttribute]
            internal static void Initialize()
            {
                var commandBuilder = new TestApp.Commands.GeneratedCode.ShortFormCliCommandBuilder.Option1CommandBuilder();

                // Register this command builder so that it can be found by the definition class
                // and it can be found by the parent definition class if it's a nested/external child.
                commandBuilder.Register();
            }
        }

        /// <inheritdoc />
        public class CliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
        {
            /// <inheritdoc />
            public CliCommandBuilder()
            {
                DefinitionType = typeof(TestApp.Commands.ShortFormCliCommand.CliCommand);
                ParentDefinitionType = typeof(TestApp.Commands.ShortFormCliCommand);
                ChildDefinitionTypes = null;
                NameAutoGenerate = null;
                NameCasingConvention = null;
                NamePrefixConvention = null;
                ShortFormAutoGenerate = null;
                ShortFormPrefixConvention = null;
            }

            /// <inheritdoc />
            protected override System.CommandLine.Command DoBuild(DotMake.CommandLine.CliBindingContext bindingContext)
            {
                // Command for 'CliCommand' class
                var command = IsRoot
                    ? new System.CommandLine.RootCommand()
                    : new System.CommandLine.Command
                    (
                        Namer.GetCommandName("CliCommand", "cmd")
                    );
                var rootCommand = command as System.CommandLine.RootCommand;
                Namer.AddShortFormAlias(command, "CliCommand", "cl");

                bindingContext.CommandMap[command] = DefinitionType;
                bindingContext.CreatorMap[DefinitionType] = () =>
                {
                    return new TestApp.Commands.ShortFormCliCommand.CliCommand();
                };
                bindingContext.BinderMap[DefinitionType] = (instance, parseResult) =>
                {
                    var definitionInstance = (TestApp.Commands.ShortFormCliCommand.CliCommand)instance;

                    // Set the values for the command accessors

                    // Set the parsed or default values for the directives

                    // Set the parsed or default values for the options

                    // Set the parsed or default values for the arguments
                };

                command.SetAction(parseResult =>
                {
                    var definitionInstance = bindingContext.Bind<TestApp.Commands.ShortFormCliCommand.CliCommand>(parseResult);

                    // Call the command handler
                    var cliContext = new DotMake.CommandLine.CliContext(bindingContext, parseResult);
                    var exitCode = 0;
                    cliContext.ShowHelp();

                    return exitCode;
                });

                return command;
            }

            [System.Runtime.CompilerServices.ModuleInitializerAttribute]
            internal static void Initialize()
            {
                var commandBuilder = new TestApp.Commands.GeneratedCode.ShortFormCliCommandBuilder.CliCommandBuilder();

                // Register this command builder so that it can be found by the definition class
                // and it can be found by the parent definition class if it's a nested/external child.
                commandBuilder.Register();
            }
        }
    }
}
