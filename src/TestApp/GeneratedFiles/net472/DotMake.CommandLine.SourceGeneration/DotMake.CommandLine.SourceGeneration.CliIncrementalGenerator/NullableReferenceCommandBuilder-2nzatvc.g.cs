// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v2.7.0.0
// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.35903
// Generation: 1

namespace TestApp.Commands.GeneratedCode
{
    /// <inheritdoc />
    public class NullableReferenceCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public NullableReferenceCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.NullableReferenceCommand);
            ParentDefinitionType = null;
            ChildDefinitionTypes = null;
            NameAutoGenerate = null;
            NameCasingConvention = null;
            NamePrefixConvention = null;
            ShortFormAutoGenerate = null;
            ShortFormPrefixConvention = null;
        }

        /// <inheritdoc />
        protected override System.CommandLine.Command DoBuild(DotMake.CommandLine.CliBindingContext bindingContext)
        {
            // Command for 'NullableReferenceCommand' class
            var command = IsRoot
                ? new System.CommandLine.RootCommand()
                : new System.CommandLine.Command
                (
                    Namer.GetCommandName("NullableReferenceCommand")
                );
            var rootCommand = command as System.CommandLine.RootCommand;
            Namer.AddShortFormAlias(command, "NullableReferenceCommand");

            bindingContext.CommandMap[command] = DefinitionType;
            bindingContext.CreatorMap[DefinitionType] = () =>
            {
                return new TestApp.Commands.NullableReferenceCommand();
            };
            bindingContext.BinderMap[DefinitionType] = (instance, parseResult) =>
            {
                var definitionInstance = (TestApp.Commands.NullableReferenceCommand)instance;

                // Set the values for the command accessors

                // Set the parsed or default values for the directives

                // Set the parsed or default values for the options

                // Set the parsed or default values for the arguments
            };

            command.SetAction(parseResult =>
            {
                var definitionInstance = bindingContext.Bind<TestApp.Commands.NullableReferenceCommand>(parseResult);

                // Call the command handler
                var cliContext = new DotMake.CommandLine.CliContext(bindingContext, parseResult);
                var exitCode = 0;
                definitionInstance.Run();

                return exitCode;
            });

            return command;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.GeneratedCode.NullableReferenceCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }

        /// <inheritdoc />
        public class NullableCommandBuilder : DotMake.CommandLine.CliCommandBuilder
        {
            /// <inheritdoc />
            public NullableCommandBuilder()
            {
                DefinitionType = typeof(TestApp.Commands.NullableReferenceCommand.NullableCommand);
                ParentDefinitionType = typeof(TestApp.Commands.NullableReferenceCommand);
                ChildDefinitionTypes = null;
                NameAutoGenerate = null;
                NameCasingConvention = null;
                NamePrefixConvention = null;
                ShortFormAutoGenerate = null;
                ShortFormPrefixConvention = null;
            }

            /// <inheritdoc />
            protected override System.CommandLine.Command DoBuild(DotMake.CommandLine.CliBindingContext bindingContext)
            {
                // Command for 'NullableCommand' class
                var command = IsRoot
                    ? new System.CommandLine.RootCommand()
                    : new System.CommandLine.Command
                    (
                        Namer.GetCommandName("NullableCommand")
                    );
                var rootCommand = command as System.CommandLine.RootCommand;
                Namer.AddShortFormAlias(command, "NullableCommand");

                // Option for 'Opt' property
                var option0 = new System.CommandLine.Option<string>
                (
                    Namer.GetOptionName("Opt")
                )
                {
                    Description = "Option with nullable reference type with no default value (should be required)",
                    Required = true,
                    CustomParser = bindingContext.GetArgumentParser<string>
                    (
                        null
                    ),
                };
                option0.AcceptOnlyFromAmong(new[] {"Big", "Small"});
                Namer.AddShortFormAlias(option0, "Opt");
                command.Add(option0);

                // Option for 'OptDefault' property
                var option1 = new System.CommandLine.Option<string>
                (
                    Namer.GetOptionName("OptDefault")
                )
                {
                    Description = "Option with nullable reference type with default value (should not be required)",
                    Required = false,
                    DefaultValueFactory = _ => "Big",
                    CustomParser = bindingContext.GetArgumentParser<string>
                    (
                        null
                    ),
                };
                option1.AcceptOnlyFromAmong(new[] {"Big", "Small"});
                Namer.AddShortFormAlias(option1, "OptDefault");
                command.Add(option1);

                // Argument for 'Arg' property
                var argument0 = new System.CommandLine.Argument<string>
                (
                    Namer.GetArgumentName("Arg")
                )
                {
                    Description = "Argument with nullable reference type with no default value (should be required)",
                    CustomParser = bindingContext.GetArgumentParser<string>
                    (
                        null
                    ),
                };
                command.Add(argument0);

                // Argument for 'ArgDefault' property
                var argument1 = new System.CommandLine.Argument<string>
                (
                    Namer.GetArgumentName("ArgDefault")
                )
                {
                    Description = "Argument with nullable reference type with default value (should not be required)",
                    DefaultValueFactory = _ => "test",
                    CustomParser = bindingContext.GetArgumentParser<string>
                    (
                        null
                    ),
                };
                command.Add(argument1);

                bindingContext.CommandMap[command] = DefinitionType;
                bindingContext.CreatorMap[DefinitionType] = () =>
                {
                    return new TestApp.Commands.NullableReferenceCommand.NullableCommand();
                };
                bindingContext.BinderMap[DefinitionType] = (instance, parseResult) =>
                {
                    var definitionInstance = (TestApp.Commands.NullableReferenceCommand.NullableCommand)instance;

                    // Set the values for the command accessors

                    // Set the parsed or default values for the directives

                    // Set the parsed or default values for the options
                    definitionInstance.Opt = bindingContext.GetValue(parseResult, option0);
                    definitionInstance.OptDefault = bindingContext.GetValue(parseResult, option1);

                    // Set the parsed or default values for the arguments
                    definitionInstance.Arg = bindingContext.GetValue(parseResult, argument0);
                    definitionInstance.ArgDefault = bindingContext.GetValue(parseResult, argument1);
                };

                command.SetAction(parseResult =>
                {
                    var definitionInstance = bindingContext.Bind<TestApp.Commands.NullableReferenceCommand.NullableCommand>(parseResult);

                    // Call the command handler
                    var cliContext = new DotMake.CommandLine.CliContext(bindingContext, parseResult);
                    var exitCode = 0;
                    definitionInstance.Run(cliContext);

                    return exitCode;
                });

                return command;
            }

            [System.Runtime.CompilerServices.ModuleInitializerAttribute]
            internal static void Initialize()
            {
                var commandBuilder = new TestApp.Commands.GeneratedCode.NullableReferenceCommandBuilder.NullableCommandBuilder();

                // Register this command builder so that it can be found by the definition class
                // and it can be found by the parent definition class if it's a nested/external child.
                commandBuilder.Register();
            }
        }

        /// <inheritdoc />
        public class NonNullableCommandBuilder : DotMake.CommandLine.CliCommandBuilder
        {
            /// <inheritdoc />
            public NonNullableCommandBuilder()
            {
                DefinitionType = typeof(TestApp.Commands.NullableReferenceCommand.NonNullableCommand);
                ParentDefinitionType = typeof(TestApp.Commands.NullableReferenceCommand);
                ChildDefinitionTypes = null;
                NameAutoGenerate = null;
                NameCasingConvention = null;
                NamePrefixConvention = null;
                ShortFormAutoGenerate = null;
                ShortFormPrefixConvention = null;
            }

            /// <inheritdoc />
            protected override System.CommandLine.Command DoBuild(DotMake.CommandLine.CliBindingContext bindingContext)
            {
                // Command for 'NonNullableCommand' class
                var command = IsRoot
                    ? new System.CommandLine.RootCommand()
                    : new System.CommandLine.Command
                    (
                        Namer.GetCommandName("NonNullableCommand")
                    );
                var rootCommand = command as System.CommandLine.RootCommand;
                Namer.AddShortFormAlias(command, "NonNullableCommand");

                // Option for 'Opt' property
                var option0 = new System.CommandLine.Option<string>
                (
                    Namer.GetOptionName("Opt")
                )
                {
                    Description = "Option with non-nullable reference type with SuppressNullableWarningExpression (should be required)",
                    Required = true,
                    CustomParser = bindingContext.GetArgumentParser<string>
                    (
                        null
                    ),
                };
                option0.AcceptOnlyFromAmong(new[] {"Big", "Small"});
                Namer.AddShortFormAlias(option0, "Opt");
                command.Add(option0);

                // Option for 'OptDefault' property
                var option1 = new System.CommandLine.Option<string>
                (
                    Namer.GetOptionName("OptDefault")
                )
                {
                    Description = "Option with non-nullable reference type with default value (should not be required)",
                    Required = false,
                    DefaultValueFactory = _ => "Big",
                    CustomParser = bindingContext.GetArgumentParser<string>
                    (
                        null
                    ),
                };
                option1.AcceptOnlyFromAmong(new[] {"Big", "Small"});
                Namer.AddShortFormAlias(option1, "OptDefault");
                command.Add(option1);

                // Argument for 'Arg' property
                var argument0 = new System.CommandLine.Argument<string>
                (
                    Namer.GetArgumentName("Arg")
                )
                {
                    Description = "Argument with non-nullable reference type type with SuppressNullableWarningExpression (should be required)",
                    CustomParser = bindingContext.GetArgumentParser<string>
                    (
                        null
                    ),
                };
                command.Add(argument0);

                // Argument for 'ArgDefault' property
                var argument1 = new System.CommandLine.Argument<string>
                (
                    Namer.GetArgumentName("ArgDefault")
                )
                {
                    Description = "Argument with non-nullable reference type with default value (should not be required)",
                    DefaultValueFactory = _ => "test",
                    CustomParser = bindingContext.GetArgumentParser<string>
                    (
                        null
                    ),
                };
                command.Add(argument1);

                bindingContext.CommandMap[command] = DefinitionType;
                bindingContext.CreatorMap[DefinitionType] = () =>
                {
                    return new TestApp.Commands.NullableReferenceCommand.NonNullableCommand();
                };
                bindingContext.BinderMap[DefinitionType] = (instance, parseResult) =>
                {
                    var definitionInstance = (TestApp.Commands.NullableReferenceCommand.NonNullableCommand)instance;

                    // Set the values for the command accessors

                    // Set the parsed or default values for the directives

                    // Set the parsed or default values for the options
                    definitionInstance.Opt = bindingContext.GetValue(parseResult, option0);
                    definitionInstance.OptDefault = bindingContext.GetValue(parseResult, option1);

                    // Set the parsed or default values for the arguments
                    definitionInstance.Arg = bindingContext.GetValue(parseResult, argument0);
                    definitionInstance.ArgDefault = bindingContext.GetValue(parseResult, argument1);
                };

                command.SetAction(parseResult =>
                {
                    var definitionInstance = bindingContext.Bind<TestApp.Commands.NullableReferenceCommand.NonNullableCommand>(parseResult);

                    // Call the command handler
                    var cliContext = new DotMake.CommandLine.CliContext(bindingContext, parseResult);
                    var exitCode = 0;
                    definitionInstance.Run(cliContext);

                    return exitCode;
                });

                return command;
            }

            [System.Runtime.CompilerServices.ModuleInitializerAttribute]
            internal static void Initialize()
            {
                var commandBuilder = new TestApp.Commands.GeneratedCode.NullableReferenceCommandBuilder.NonNullableCommandBuilder();

                // Register this command builder so that it can be found by the definition class
                // and it can be found by the parent definition class if it's a nested/external child.
                commandBuilder.Register();
            }
        }

        /// <inheritdoc />
        public class RequiredCommandBuilder : DotMake.CommandLine.CliCommandBuilder
        {
            /// <inheritdoc />
            public RequiredCommandBuilder()
            {
                DefinitionType = typeof(TestApp.Commands.NullableReferenceCommand.RequiredCommand);
                ParentDefinitionType = typeof(TestApp.Commands.NullableReferenceCommand);
                ChildDefinitionTypes = null;
                NameAutoGenerate = null;
                NameCasingConvention = null;
                NamePrefixConvention = null;
                ShortFormAutoGenerate = null;
                ShortFormPrefixConvention = null;
            }

            /// <inheritdoc />
            protected override System.CommandLine.Command DoBuild(DotMake.CommandLine.CliBindingContext bindingContext)
            {
                // Command for 'RequiredCommand' class
                var command = IsRoot
                    ? new System.CommandLine.RootCommand()
                    : new System.CommandLine.Command
                    (
                        Namer.GetCommandName("RequiredCommand")
                    );
                var rootCommand = command as System.CommandLine.RootCommand;
                Namer.AddShortFormAlias(command, "RequiredCommand");

                // Option for 'Opt' property
                var option0 = new System.CommandLine.Option<string>
                (
                    Namer.GetOptionName("Opt")
                )
                {
                    Description = "Option with required keyword with no default value (should be required)",
                    Required = true,
                    CustomParser = bindingContext.GetArgumentParser<string>
                    (
                        null
                    ),
                };
                option0.AcceptOnlyFromAmong(new[] {"Big", "Small"});
                Namer.AddShortFormAlias(option0, "Opt");
                command.Add(option0);

                // Option for 'OptDefault' property
                var option1 = new System.CommandLine.Option<string>
                (
                    Namer.GetOptionName("OptDefault")
                )
                {
                    Description = "Option with required keyword with default value (should not be required)",
                    Required = false,
                    DefaultValueFactory = _ => "Big",
                    CustomParser = bindingContext.GetArgumentParser<string>
                    (
                        null
                    ),
                };
                option1.AcceptOnlyFromAmong(new[] {"Big", "Small"});
                Namer.AddShortFormAlias(option1, "OptDefault");
                command.Add(option1);

                // Argument for 'Arg' property
                var argument0 = new System.CommandLine.Argument<string>
                (
                    Namer.GetArgumentName("Arg")
                )
                {
                    Description = "Argument with required keyword with no default value (should be required)",
                    CustomParser = bindingContext.GetArgumentParser<string>
                    (
                        null
                    ),
                };
                command.Add(argument0);

                // Argument for 'ArgDefault' property
                var argument1 = new System.CommandLine.Argument<string>
                (
                    Namer.GetArgumentName("ArgDefault")
                )
                {
                    Description = "Argument with required keyword with default value (should not be required)",
                    DefaultValueFactory = _ => "test",
                    CustomParser = bindingContext.GetArgumentParser<string>
                    (
                        null
                    ),
                };
                command.Add(argument1);

                bindingContext.CommandMap[command] = DefinitionType;
                bindingContext.CreatorMap[DefinitionType] = () =>
                {
                    return System.Activator.CreateInstance<TestApp.Commands.NullableReferenceCommand.RequiredCommand>();
                };
                bindingContext.BinderMap[DefinitionType] = (instance, parseResult) =>
                {
                    var definitionInstance = (TestApp.Commands.NullableReferenceCommand.RequiredCommand)instance;

                    // Set the values for the command accessors

                    // Set the parsed or default values for the directives

                    // Set the parsed or default values for the options
                    definitionInstance.Opt = bindingContext.GetValue(parseResult, option0);
                    definitionInstance.OptDefault = bindingContext.GetValue(parseResult, option1);

                    // Set the parsed or default values for the arguments
                    definitionInstance.Arg = bindingContext.GetValue(parseResult, argument0);
                    definitionInstance.ArgDefault = bindingContext.GetValue(parseResult, argument1);
                };

                command.SetAction(parseResult =>
                {
                    var definitionInstance = bindingContext.Bind<TestApp.Commands.NullableReferenceCommand.RequiredCommand>(parseResult);

                    // Call the command handler
                    var cliContext = new DotMake.CommandLine.CliContext(bindingContext, parseResult);
                    var exitCode = 0;
                    definitionInstance.Run(cliContext);

                    return exitCode;
                });

                return command;
            }

            [System.Runtime.CompilerServices.ModuleInitializerAttribute]
            internal static void Initialize()
            {
                var commandBuilder = new TestApp.Commands.GeneratedCode.NullableReferenceCommandBuilder.RequiredCommandBuilder();

                // Register this command builder so that it can be found by the definition class
                // and it can be found by the parent definition class if it's a nested/external child.
                commandBuilder.Register();
            }
        }
    }
}
