// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v2.6.0.0
// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.26210
// Generation: 1

namespace TestApp.Commands.GeneratedCode
{
    /// <inheritdoc />
    public class DefaultValuesCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public DefaultValuesCliCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.DefaultValuesCliCommand);
            ParentDefinitionType = null;
            ChildDefinitionTypes = null;
            NameAutoGenerate = null;
            NameCasingConvention = null;
            NamePrefixConvention = null;
            ShortFormAutoGenerate = null;
            ShortFormPrefixConvention = null;
        }

        private TestApp.Commands.DefaultValuesCliCommand CreateInstance()
        {
            return new TestApp.Commands.DefaultValuesCliCommand();
        }

        /// <inheritdoc />
        protected override System.CommandLine.Command DoBuild()
        {
            // Command for 'DefaultValuesCliCommand' class
            var commandName = Namer.GetCommandName("DefaultValuesCliCommand");
            var command = IsRoot
                ? new System.CommandLine.RootCommand()
                : new System.CommandLine.Command(commandName);
            var rootCommand = command as System.CommandLine.RootCommand;
            command.Description = "A root cli command for testing various property initializers (default values)";
            Namer.AddShortFormAlias(command, "DefaultValuesCliCommand");

            // Option for 'Opt1' property
            var option0Name = Namer.GetOptionName("Opt1");
            var option0 = new System.CommandLine.Option<string>
            (
                option0Name
            )
            {
                Required = false,
                DefaultValueFactory = _ => "Opt1Value",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option0, "Opt1");
            command.Add(option0);

            // Option for 'Opt2' property
            var option1Name = Namer.GetOptionName("Opt2");
            var option1 = new System.CommandLine.Option<int>
            (
                option1Name
            )
            {
                Required = false,
                DefaultValueFactory = _ => 5,
                CustomParser = GetArgumentParser<int>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option1, "Opt2");
            command.Add(option1);

            // Option for 'Opt3' property
            var option2Name = Namer.GetOptionName("Opt3");
            var option2 = new System.CommandLine.Option<System.IO.FileAccess>
            (
                option2Name
            )
            {
                Required = false,
                DefaultValueFactory = _ => System.IO.FileAccess.Read,
                CustomParser = GetArgumentParser<System.IO.FileAccess>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option2, "Opt3");
            command.Add(option2);

            // Option for 'Opt4' property
            var option3Name = Namer.GetOptionName("Opt4");
            var option3 = new System.CommandLine.Option<System.IO.FileAccess>
            (
                option3Name
            )
            {
                Required = false,
                DefaultValueFactory = _ => TestApp.Commands.DefaultValuesCliCommand.GetFileAccess(),
                CustomParser = GetArgumentParser<System.IO.FileAccess>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option3, "Opt4");
            command.Add(option3);

            // Option for 'Opt5' property
            var option4Name = Namer.GetOptionName("Opt5");
            var option4 = new System.CommandLine.Option<System.IO.FileAccess>
            (
                option4Name
            )
            {
                Required = false,
                DefaultValueFactory = _ => TestApp.Commands.DefaultValuesCliCommand.StaticFileAccess,
                CustomParser = GetArgumentParser<System.IO.FileAccess>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option4, "Opt5");
            command.Add(option4);

            // Option for 'Opt6' property
            var option5Name = Namer.GetOptionName("Opt6");
            var option5 = new System.CommandLine.Option<bool>
            (
                option5Name
            )
            {
                Required = false,
                DefaultValueFactory = _ => true,
                CustomParser = GetArgumentParser<bool>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option5, "Opt6");
            command.Add(option5);

            // Option for 'Opt8' property
            var option6Name = Namer.GetOptionName("Opt8");
            var option6 = new System.CommandLine.Option<string>
            (
                option6Name
            )
            {
                Required = false,
                DefaultValueFactory = _ => @"value with
            new line",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option6, "Opt8");
            command.Add(option6);

            // Option for 'Opt9' property
            var option7Name = Namer.GetOptionName("Opt9");
            var option7 = new System.CommandLine.Option<string>
            (
                option7Name
            )
            {
                Required = false,
                DefaultValueFactory = _ => $"value {TestApp.Commands.DefaultValuesCliCommand.StaticFileAccess}",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option7, "Opt9");
            command.Add(option7);

            // Option for 'Opt10' property
            var option8Name = Namer.GetOptionName("Opt10");
            var option8 = new System.CommandLine.Option<string>
            (
                option8Name
            )
            {
                Required = false,
                DefaultValueFactory = _ => new ('-', 5),
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option8, "Opt10");
            command.Add(option8);

            // Argument for 'Arg1' property
            var argument0Name = Namer.GetArgumentName("Arg1");
            var argument0 = new System.CommandLine.Argument<string>
            (
                argument0Name
            )
            {
                DefaultValueFactory = _ => "Arg1Value",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            command.Add(argument0);

            // Argument for 'Arg2' property
            var argument1Name = Namer.GetArgumentName("Arg2");
            var argument1 = new System.CommandLine.Argument<int>
            (
                argument1Name
            )
            {
                DefaultValueFactory = _ => 2,
                CustomParser = GetArgumentParser<int>
                (
                    null
                ),
            };
            command.Add(argument1);

            Binder = (parseResult) =>
            {
                var targetClass = CreateInstance();

                //  Set the values for the parent command accessors

                //  Set the parsed or default values for the directives

                //  Set the parsed or default values for the options
                targetClass.Opt1 = GetValueForOption(parseResult, option0);
                targetClass.Opt2 = GetValueForOption(parseResult, option1);
                targetClass.Opt3 = GetValueForOption(parseResult, option2);
                targetClass.Opt4 = GetValueForOption(parseResult, option3);
                targetClass.Opt5 = GetValueForOption(parseResult, option4);
                targetClass.Opt6 = GetValueForOption(parseResult, option5);
                targetClass.Opt8 = GetValueForOption(parseResult, option6);
                targetClass.Opt9 = GetValueForOption(parseResult, option7);
                targetClass.Opt10 = GetValueForOption(parseResult, option8);

                //  Set the parsed or default values for the arguments
                targetClass.Arg1 = GetValueForArgument(parseResult, argument0);
                targetClass.Arg2 = GetValueForArgument(parseResult, argument1);

                return targetClass;
            };

            command.SetAction(parseResult =>
            {
                var targetClass = (TestApp.Commands.DefaultValuesCliCommand) Bind(parseResult);

                //  Call the command handler
                var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                var exitCode = 0;
                targetClass.Run(cliContext);

                return exitCode;
            });

            return command;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.GeneratedCode.DefaultValuesCliCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }
    }
}
