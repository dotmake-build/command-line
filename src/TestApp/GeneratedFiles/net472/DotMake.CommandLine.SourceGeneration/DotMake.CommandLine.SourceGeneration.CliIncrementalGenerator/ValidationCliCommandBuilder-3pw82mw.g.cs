// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v2.7.0.0
// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.35903
// Generation: 1

namespace TestApp.Commands.GeneratedCode
{
    /// <inheritdoc />
    public class ValidationCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public ValidationCliCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.ValidationCliCommand);
            ParentDefinitionType = null;
            ChildDefinitionTypes = null;
            NameAutoGenerate = null;
            NameCasingConvention = null;
            NamePrefixConvention = null;
            ShortFormAutoGenerate = null;
            ShortFormPrefixConvention = null;
        }

        /// <inheritdoc />
        protected override System.CommandLine.Command DoBuild(DotMake.CommandLine.CliBindingContext bindingContext)
        {
            // Command for 'ValidationCliCommand' class
            var command = IsRoot
                ? new System.CommandLine.RootCommand()
                : new System.CommandLine.Command
                (
                    Namer.GetCommandName("ValidationCliCommand")
                );
            var rootCommand = command as System.CommandLine.RootCommand;
            Namer.AddShortFormAlias(command, "ValidationCliCommand");

            // Option for 'OptFile1' property
            var option0 = new System.CommandLine.Option<System.IO.FileInfo>
            (
                Namer.GetOptionName("OptFile1")
            )
            {
                Required = false,
                CustomParser = bindingContext.GetArgumentParser<System.IO.FileInfo>
                (
                    null
                ),
            };
            DotMake.CommandLine.CliValidationExtensions.AddValidator(option0, DotMake.CommandLine.CliValidationRules.ExistingFile);
            Namer.AddShortFormAlias(option0, "OptFile1");
            command.Add(option0);

            // Option for 'OptFile2' property
            var option1 = new System.CommandLine.Option<string>
            (
                Namer.GetOptionName("OptFile2")
            )
            {
                Required = false,
                CustomParser = bindingContext.GetArgumentParser<string>
                (
                    null
                ),
            };
            DotMake.CommandLine.CliValidationExtensions.AddValidator(option1, DotMake.CommandLine.CliValidationRules.None | DotMake.CommandLine.CliValidationRules.NonExistingFile | DotMake.CommandLine.CliValidationRules.LegalPath);
            Namer.AddShortFormAlias(option1, "OptFile2");
            command.Add(option1);

            // Option for 'OptDir' property
            var option2 = new System.CommandLine.Option<System.IO.DirectoryInfo>
            (
                Namer.GetOptionName("OptDir")
            )
            {
                Required = false,
                CustomParser = bindingContext.GetArgumentParser<System.IO.DirectoryInfo>
                (
                    null
                ),
            };
            DotMake.CommandLine.CliValidationExtensions.AddValidator(option2, DotMake.CommandLine.CliValidationRules.ExistingDirectory);
            Namer.AddShortFormAlias(option2, "OptDir");
            command.Add(option2);

            // Option for 'OptPattern1' property
            var option3 = new System.CommandLine.Option<string>
            (
                Namer.GetOptionName("OptPattern1")
            )
            {
                Required = false,
                CustomParser = bindingContext.GetArgumentParser<string>
                (
                    null
                ),
            };
            DotMake.CommandLine.CliValidationExtensions.AddValidator(option3, "(?i)^[a-z]+$");
            Namer.AddShortFormAlias(option3, "OptPattern1");
            command.Add(option3);

            // Option for 'OptPattern2' property
            var option4 = new System.CommandLine.Option<string>
            (
                Namer.GetOptionName("OptPattern2")
            )
            {
                Required = false,
                CustomParser = bindingContext.GetArgumentParser<string>
                (
                    null
                ),
            };
            DotMake.CommandLine.CliValidationExtensions.AddValidator(option4, "(?i)^[a-z]+$", "Custom error message");
            Namer.AddShortFormAlias(option4, "OptPattern2");
            command.Add(option4);

            // Option for 'OptUrl' property
            var option5 = new System.CommandLine.Option<string>
            (
                Namer.GetOptionName("OptUrl")
            )
            {
                Required = false,
                CustomParser = bindingContext.GetArgumentParser<string>
                (
                    null
                ),
            };
            DotMake.CommandLine.CliValidationExtensions.AddValidator(option5, DotMake.CommandLine.CliValidationRules.LegalUrl);
            Namer.AddShortFormAlias(option5, "OptUrl");
            command.Add(option5);

            // Option for 'OptUri' property
            var option6 = new System.CommandLine.Option<string>
            (
                Namer.GetOptionName("OptUri")
            )
            {
                Required = false,
                CustomParser = bindingContext.GetArgumentParser<string>
                (
                    null
                ),
            };
            DotMake.CommandLine.CliValidationExtensions.AddValidator(option6, DotMake.CommandLine.CliValidationRules.LegalUri);
            Namer.AddShortFormAlias(option6, "OptUri");
            command.Add(option6);

            // Argument for 'OptFileName' property
            var argument0 = new System.CommandLine.Argument<string>
            (
                Namer.GetArgumentName("OptFileName")
            )
            {
                CustomParser = bindingContext.GetArgumentParser<string>
                (
                    null
                ),
            };
            DotMake.CommandLine.CliValidationExtensions.AddValidator(argument0, DotMake.CommandLine.CliValidationRules.LegalFileName);
            command.Add(argument0);

            bindingContext.CommandMap[command] = DefinitionType;
            bindingContext.CreatorMap[DefinitionType] = () =>
            {
                return new TestApp.Commands.ValidationCliCommand();
            };
            bindingContext.BinderMap[DefinitionType] = (instance, parseResult) =>
            {
                var definitionInstance = (TestApp.Commands.ValidationCliCommand)instance;

                // Set the values for the command accessors

                // Set the parsed or default values for the directives

                // Set the parsed or default values for the options
                definitionInstance.OptFile1 = bindingContext.GetValue(parseResult, option0);
                definitionInstance.OptFile2 = bindingContext.GetValue(parseResult, option1);
                definitionInstance.OptDir = bindingContext.GetValue(parseResult, option2);
                definitionInstance.OptPattern1 = bindingContext.GetValue(parseResult, option3);
                definitionInstance.OptPattern2 = bindingContext.GetValue(parseResult, option4);
                definitionInstance.OptUrl = bindingContext.GetValue(parseResult, option5);
                definitionInstance.OptUri = bindingContext.GetValue(parseResult, option6);

                // Set the parsed or default values for the arguments
                definitionInstance.OptFileName = bindingContext.GetValue(parseResult, argument0);
            };

            command.SetAction(parseResult =>
            {
                var definitionInstance = bindingContext.Bind<TestApp.Commands.ValidationCliCommand>(parseResult);

                // Call the command handler
                var cliContext = new DotMake.CommandLine.CliContext(bindingContext, parseResult);
                var exitCode = 0;
                definitionInstance.Run(cliContext);

                return exitCode;
            });

            return command;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.GeneratedCode.ValidationCliCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }
    }
}
