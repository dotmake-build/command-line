// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v2.5.8.0
// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.26210
// Generation: 1

namespace TestApp.Commands.GeneratedCode
{
    /// <inheritdoc />
    public class InvalidCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public InvalidCliCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.InvalidCliCommand);
            ParentDefinitionType = null;
            ChildDefinitionTypes = null;
            NameAutoGenerate = null;
            NameCasingConvention = null;
            NamePrefixConvention = null;
            ShortFormAutoGenerate = null;
            ShortFormPrefixConvention = null;
        }

        private TestApp.Commands.InvalidCliCommand CreateInstance()
        {
            return new TestApp.Commands.InvalidCliCommand();
        }

        /// <inheritdoc />
        protected override System.CommandLine.Command DoBuild()
        {
            // Command for 'InvalidCliCommand' class
            var commandName = Namer.GetCommandName("InvalidCliCommand");
            var command = IsRoot
                ? new System.CommandLine.RootCommand()
                : new System.CommandLine.Command(commandName);
            var rootCommand = command as System.CommandLine.RootCommand;
            Namer.AddShortFormAlias(command, "InvalidCliCommand");

            // Option for 'Option1' property
            var option0Name = Namer.GetOptionName("Option1");
            var option0 = new System.CommandLine.Option<string>
            (
                option0Name
            )
            {
                Description = "Description for Option1",
                Required = false,
                DefaultValueFactory = _ => "DefaultForOption1",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option0, "Option1");
            command.Add(option0);

            // Argument for 'Argument1' property
            var argument0Name = Namer.GetArgumentName("Argument1");
            var argument0 = new System.CommandLine.Argument<string>
            (
                argument0Name
            )
            {
                Description = "Description for Argument1",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            command.Add(argument0);

            Binder = (parseResult) =>
            {
                var targetClass = CreateInstance();

                //  Set the values for the parent command accessors

                //  Set the parsed or default values for the directives

                //  Set the parsed or default values for the options
                targetClass.Option1 = GetValueForOption(parseResult, option0);

                //  Set the parsed or default values for the arguments
                targetClass.Argument1 = GetValueForArgument(parseResult, argument0);

                return targetClass;
            };

            command.SetAction(parseResult =>
            {
                var targetClass = (TestApp.Commands.InvalidCliCommand) Bind(parseResult);

                //  Call the command handler
                var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                var exitCode = 0;
                targetClass.Run(cliContext);

                return exitCode;
            });

            return command;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.GeneratedCode.InvalidCliCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }

        /// <inheritdoc />
        public class SubCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
        {
            /// <inheritdoc />
            public SubCliCommandBuilder()
            {
                DefinitionType = typeof(TestApp.Commands.InvalidCliCommand.SubCliCommand);
                ParentDefinitionType = typeof(TestApp.Commands.InvalidCliCommand);
                ChildDefinitionTypes = null;
                NameAutoGenerate = null;
                NameCasingConvention = null;
                NamePrefixConvention = null;
                ShortFormAutoGenerate = null;
                ShortFormPrefixConvention = null;
            }

            private TestApp.Commands.InvalidCliCommand.SubCliCommand CreateInstance()
            {
                return new TestApp.Commands.InvalidCliCommand.SubCliCommand();
            }

            /// <inheritdoc />
            protected override System.CommandLine.Command DoBuild()
            {
                // Command for 'SubCliCommand' class
                var commandName = Namer.GetCommandName("SubCliCommand");
                var command = IsRoot
                    ? new System.CommandLine.RootCommand()
                    : new System.CommandLine.Command(commandName);
                var rootCommand = command as System.CommandLine.RootCommand;
                command.Description = "A nested level 1 sub-command";
                Namer.AddShortFormAlias(command, "SubCliCommand");

                // Option for 'Option1' property
                var option0Name = Namer.GetOptionName("Option1");
                var option0 = new System.CommandLine.Option<string>
                (
                    option0Name
                )
                {
                    Description = "Description for Option1",
                    Required = false,
                    DefaultValueFactory = _ => "DefaultForOption1",
                    CustomParser = GetArgumentParser<string>
                    (
                        null
                    ),
                };
                Namer.AddShortFormAlias(option0, "Option1");
                command.Add(option0);

                // Argument for 'Argument1' property
                var argument0Name = Namer.GetArgumentName("Argument1");
                var argument0 = new System.CommandLine.Argument<string>
                (
                    argument0Name
                )
                {
                    Description = "Description for Argument1",
                    CustomParser = GetArgumentParser<string>
                    (
                        null
                    ),
                };
                command.Add(argument0);

                Binder = (parseResult) =>
                {
                    var targetClass = CreateInstance();

                    //  Set the values for the parent command accessors

                    //  Set the parsed or default values for the directives

                    //  Set the parsed or default values for the options
                    targetClass.Option1 = GetValueForOption(parseResult, option0);

                    //  Set the parsed or default values for the arguments
                    targetClass.Argument1 = GetValueForArgument(parseResult, argument0);

                    return targetClass;
                };

                command.SetAction(parseResult =>
                {
                    var targetClass = (TestApp.Commands.InvalidCliCommand.SubCliCommand) Bind(parseResult);

                    //  Call the command handler
                    var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                    var exitCode = 0;
                    targetClass.Run(cliContext);

                    return exitCode;
                });

                return command;
            }

            [System.Runtime.CompilerServices.ModuleInitializerAttribute]
            internal static void Initialize()
            {
                var commandBuilder = new TestApp.Commands.GeneratedCode.InvalidCliCommandBuilder.SubCliCommandBuilder();

                // Register this command builder so that it can be found by the definition class
                // and it can be found by the parent definition class if it's a nested/external child.
                commandBuilder.Register();
            }
        }
    }
}
