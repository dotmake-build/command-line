// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v2.5.8.0
// Roslyn (Microsoft.CodeAnalysis) v4.1400.25.26210
// Generation: 1

namespace TestApp.Commands.GeneratedCode
{
    /// <inheritdoc />
    public class RootCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public RootCliCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.RootCliCommand);
            ParentDefinitionType = null;
            ChildDefinitionTypes = null;
            NameAutoGenerate = null;
            NameCasingConvention = null;
            NamePrefixConvention = null;
            ShortFormAutoGenerate = null;
            ShortFormPrefixConvention = null;
        }

        private TestApp.Commands.RootCliCommand CreateInstance()
        {
            return new TestApp.Commands.RootCliCommand();
        }

        /// <inheritdoc />
        protected override System.CommandLine.Command DoBuild()
        {
            // Command for 'RootCliCommand' class
            var commandName = Namer.GetCommandName("RootCliCommand");
            var command = IsRoot
                ? new System.CommandLine.RootCommand()
                : new System.CommandLine.Command(commandName);
            var rootCommand = command as System.CommandLine.RootCommand;
            command.Description = "A root cli command";
            Namer.AddShortFormAlias(command, "RootCliCommand");

            // Option for 'Option1' property
            var option0Name = Namer.GetOptionName("Option1");
            var option0 = new System.CommandLine.Option<string>
            (
                option0Name
            )
            {
                Description = "Description for Option1",
                Required = false,
                DefaultValueFactory = _ => "DefaultForOption1",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            Namer.AddShortFormAlias(option0, "Option1");
            command.Add(option0);

            // Argument for 'Argument1' property
            var argument0Name = Namer.GetArgumentName("Argument1");
            var argument0 = new System.CommandLine.Argument<string>
            (
                argument0Name
            )
            {
                Description = "Description for Argument1",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            command.Add(argument0);

            Binder = (parseResult) =>
            {
                var targetClass = CreateInstance();

                //  Set the values for the parent command accessors

                //  Set the parsed or default values for the directives

                //  Set the parsed or default values for the options
                targetClass.Option1 = GetValueForOption(parseResult, option0);

                //  Set the parsed or default values for the arguments
                targetClass.Argument1 = GetValueForArgument(parseResult, argument0);

                return targetClass;
            };

            command.SetAction(parseResult =>
            {
                var targetClass = (TestApp.Commands.RootCliCommand) Bind(parseResult);

                //  Call the command handler
                var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                var exitCode = 0;
                targetClass.Run();

                return exitCode;
            });

            return command;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.GeneratedCode.RootCliCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }
    }
}
