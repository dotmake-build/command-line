<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net8.0;netstandard2.0</TargetFrameworks>
    <LangVersion>10.0</LangVersion>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>

    <!--
      IsTrimmable to enable trim warnings
      https://learn.microsoft.com/en-us/dotnet/core/deploying/trimming/prepare-libraries-for-trimming?pivots=dotnet-6-0#enable-project-specific-trimming    

      IsAotCompatible to enable trim warnings (also enables IsTrimmable but it's only for net.8.0)
      https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/?tabs=net8plus%2Cwindows#aot-compatibility-analyzers
    -->
    <IsTrimmable Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net6.0'))">true</IsTrimmable>
    <IsAotCompatible Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net7.0'))">true</IsAotCompatible>

    <!-- NuGet Package Information (common ones are in Directory.Build.props) -->
    <!-- Description is used for assembly and NuGet metadata -->
    <Description>Declarative syntax for System.CommandLine via attributes for easy, fast, strongly-typed (no reflection) usage. Includes a source generator which automagically converts your classes to CLI commands and properties to CLI options or CLI arguments.</Description>
    <PackageTags>command-line CLI console System.CommandLine declarative attributes parsing command argument option generator</PackageTags>
    <PackageReleaseNotes>
      <![CDATA[
        - Added: `[CliDirective]` attribute for properties to define custom directives:
          ```c#
          [CliCommand(Description = "A root cli command with directives")]
          public class DirectiveCliCommand
          {
              [CliDirective]
              public bool Debug { get; set; }

              [CliDirective]
              public string Directive2 { get; set; }

              [CliDirective]
              public string[] Vars { get; set; }

              public void Run(CliContext context)
              {
                  if (context.IsEmpty())
                      context.ShowHelp();
                  else
                  {
                      Console.WriteLine($"Directive '{nameof(Debug)}' = {StringExtensions.FormatValue(Debug)}");
                      Console.WriteLine($"Directive '{nameof(Directive2)}' = {StringExtensions.FormatValue(Directive2)}");
                      Console.WriteLine($"Directive '{nameof(Vars)}' = {StringExtensions.FormatValue(Vars)}");
                  }
              }
          }
          ```
          Currently only `bool`, `string` and `string[]` types are supported for `[CliDirective]` properties.
          Here is sample usage and output:
          ```console
          src\TestApp\bin\Debug\net8.0>TestApp [debug] [directive-2:val1] [vars:val2] [vars:val3]
          Directive 'Debug' = true
          Directive 'Directive2' = "val1"
          Directive 'Vars' = ["val2", "val3"]
          ```

        - Improved: `CliNameCasingConvention` will now generate better CLI identifiers, i.e. it will treat unicode letter casing
          and unicode numbers in class and property names correctly. `StringExtensions.ToCase()` will handle strings that contain
          unicode space and punctuation characters correctly.

        - Improved: Smarter auto-generated short form aliases. In previous versions, only first letter was added as short form
          if it wasn't already used. Now letters of every word in the option name will be used to reduce conflicts.
          Also short form aliases will now also be generated for commands.
          ```c#
          public class ShortFormCliCommand
          {
                  [CliOption(Alias = "o2")]
                  public string Oauth2GrantType { get; set; } = "";

                  [CliOption]
                  public string Oauth2TokenUrl { get; set; } = "";

                  [CliOption]
                  public string Oauth2ClientId { get; set; } = "";

                  [CliOption]
                  public string Oauth2ClientSecret { get; set; } = "";

                  [CliOption]
                  public string Sha256 { get; set; } = "";
          }
          ```

          ```console
          Options:
            -o2, --oauth-2-grant-type
            -o2tu, --oauth-2-token-url
            -o2ci, --oauth-2-client-id
            -o2cs, --oauth-2-client-secret
            -s256, --sha-256
          ```

        - Added: `Alias` property to `CliCommand` and `CliOption` attributes in addition to existing `Aliases` property.
          `Alias` property is more useful, as most of the time you will want to add a single alias which is usually a short form alias.
          When this property is set, it will override the auto-generated short form alias so when you are not happy with a specific
          auto-generated alias you can override it instead of disabling all via `ShortFormAutoGenerate = false`.

          When manually setting this property, if you don't specify a prefix, it will be prefixed automatically according
          to `ShortFormPrefixConvention` (e.g. `-o` or `--o` or `/o`) unless it's set to newly added `CliNamePrefixConvention.None`.
          This will now be also same for existing `Aliases` property but except, aliases without prefix will be prefixed automatically
          according to `NamePrefixConvention` instead.

        - Added: `CliNameAutoGenerate` enum and changed type of `[CliCommand].ShortFormAutoGenerate` from `bool` to this enum.
          Added new`[CliCommand].NameAutoGenerate` property with same enum.
          Auto-generated names can be disabled for all or specific CLI symbol types via `[CliCommand].NameAutoGenerate`.
          Auto-generated short form aliases can be disabled for all or specific CLI symbol types via `[CliCommand].ShortFormAutoGenerate`.
      ]]>
     </PackageReleaseNotes>
  </PropertyGroup>

  <Import Project="..\DotMake.CommandLine.Shared\DotMake.CommandLine.Shared.projitems" Label="Shared" />

  <ItemGroup>
    <!--<PackageReference Include="System.CommandLine" Version="2.0.0-beta4.22272.1" />-->
    <!--
      Using the latest version package published on DotNet Daily Builds feed,
      as it's not on official nuget feed, we directly reference the DLL inside the package so that it's also bundled in our package.
      https://blog.maartenballiauw.be/post/2020/04/22/referencing-specific-assembly-nuget-package.html
    -->
    <PackageReference Include="System.CommandLine" Version="2.0.0-beta5.25302.104">
      <GeneratePathProperty>true</GeneratePathProperty>
      <IncludeAssets>None</IncludeAssets>
      <ExcludeAssets>All</ExcludeAssets>
      <PrivateAssets>None</PrivateAssets>
    </PackageReference>
    <PackageReference Include="System.Memory" version="4.5.4" Condition="'$(TargetFramework)' == 'netstandard2.0'" />
    <Reference Include="System.CommandLine">
      <HintPath>$(PkgSystem_CommandLine)\lib\$(TargetFramework)\System.CommandLine.dll</HintPath>
    </Reference>
    <None Include="$(OutputPath)\$(TargetFramework)\**\System.CommandLine*" Pack="true" PackagePath="lib/$(TargetFramework)" Visible="false" />
  </ItemGroup>

  <ItemGroup>
    <!-- 
      https://github.com/dotnet/roslyn/issues/55229 
      https://stackoverflow.com/a/69193922
    -->
    <!-- Ensure that the source generator is built together with this project -->
    <ProjectReference Include="..\$(MSBuildProjectName).SourceGeneration\$(MSBuildProjectName).SourceGeneration.csproj">
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
    </ProjectReference>
    <!-- Package the generator in the analyzer directory of the nuget package -->
    <None Include="..\$(MSBuildProjectName).SourceGeneration\$(OutputPath)\netstandard2.0\*.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
    <!--
      Package MSBuild .props file in the nuget package
      https://learn.microsoft.com/en-us/nuget/concepts/msbuild-props-and-targets
    -->
    <None Include="nuget.props" Pack="true" PackagePath="build/$(PackageId).props" Visible="false" />
  </ItemGroup>

  <ItemGroup>
    <None Remove="*.DotSettings" />
  </ItemGroup>

</Project>
