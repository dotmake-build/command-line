<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net8.0;netstandard2.0</TargetFrameworks>
    <LangVersion>10.0</LangVersion>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>

    <!--
      IsTrimmable to enable trim warnings
      https://learn.microsoft.com/en-us/dotnet/core/deploying/trimming/prepare-libraries-for-trimming?pivots=dotnet-6-0#enable-project-specific-trimming    

      IsAotCompatible to enable trim warnings (also enables IsTrimmable but it's only for net.8.0)
      https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/?tabs=net8plus%2Cwindows#aot-compatibility-analyzers
    -->
    <IsTrimmable Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net6.0'))">true</IsTrimmable>
    <IsAotCompatible Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net7.0'))">true</IsAotCompatible>

    <!-- NuGet Package Information (common ones are in Directory.Build.props) -->
    <!-- Description is used for assembly and NuGet metadata -->
    <Description>Declarative syntax for System.CommandLine via attributes for easy, fast, strongly-typed (no reflection) usage. Includes a source generator which automagically converts your classes to CLI commands and properties to CLI options or CLI arguments.</Description>
    <PackageTags>command-line CLI console System.CommandLine declarative attributes parsing command argument option generator</PackageTags>
    <PackageReleaseNotes>
      <![CDATA[
        - Improved: Even more robust command binding. Added `Create`, `BindCalled`, `BindAll`, `IsCalled`, `Contains` methods  to `CliResult`.
          These methods are also available in `CliContext.Result` which can be accessed in `Run` command handler.
          ```c#
          var result = Cli.Parse<RootCliCommand>(args);

          //Bind now returns null if the command line input does not contain
          //the indicated definition class (as self or as a parent)
          var subCommand = result.Bind<SubCliCommand>();
          //unless you set new returnEmpty parameter to true
          var subCommand2 = result.Bind<SubCliCommand>(true);

          //You can get an object for called command
          //without specifying the definition class
          var command = result.BindCalled();
          if (command is SubCliCommand subCommand3)
          {

          }
          //Or get an array of objects for all contained commands
          //(self and parents) without specifying the definition class
          var commands = result.BindAll();
          if (commands[0] is SubCliCommand subCommand4)
          {

          }

          //You can check if the command line input is
          //for the indicated definition class
          if (result.IsCalled<SubCliCommand>())
          {

          }
          //You can check if the command line input contains
          //the indicated definition class (as self or as a parent)
          if (result.Contains<SubCliCommand>())
          {

          }

          //You can create a new instance of the command definition class
          //but without any binding. This is useful for example when you need to
          //instantiate a definition class when using dependency injection.
          var subCommand5 = result.Create<SubCliCommand>();
          ```
          
        - Improved: Command accessor properties can now be safely used for child commands and not only parent commands.
          Circular dependency errors will be prevented, for example when parent and child has command accessors that point to each other.
          ```c#
          [CliCommand(Description = "A root cli command")]
          public class RootCliCommand
          {
              //This will be non-null only when the called command was this sub-command
              //For example you can check sub-command accessors for null to determine
              //which one was called
              public SubCliCommand SubCliCommandAccessor { get; set; }

              [CliCommand(Description = "A sub-command")]
              public class SubCliCommand
              {
                  //This will be always non-null because if sub-command was called,
                  //it's parent-command should also have been called
                  public RootCliCommand RootCliCommandAccessor { get; set; }
              }
          }
          ```
      ]]>
     </PackageReleaseNotes>
  </PropertyGroup>

  <Import Project="..\DotMake.CommandLine.Shared\DotMake.CommandLine.Shared.projitems" Label="Shared" />

  <ItemGroup>
    <PackageReference Include="System.CommandLine" Version="2.0.0-beta5.25306.1" />

    <!--
      UPDATE: No longer using this as now 2.0.0-beta5.25306.1 is released to official nuget feed.
      Using the latest version package published on DotNet Daily Builds feed (package source defined in src/nuget.config),
      as it's not on official nuget feed, we directly reference the DLL inside the package so that it's also bundled in our package.

      So we have <PackageReference> with ExcludeAssets="All" so that the package reference is not added as a nuget dependency
      in our NuGet package, and with GeneratePathProperty="true" so that we can use <Reference> to reference the DLL from
      the package directly with HintPath. Finally, we have <None> item with Pack="true" to pack all DLLs named System.CommandLine*
      in our NuGet package.
      https://blog.maartenballiauw.be/post/2020/04/22/referencing-specific-assembly-nuget-package.html
    -->
    <!--
    <PackageReference Include="System.CommandLine" Version="2.0.0-beta5.25302.104">
      <GeneratePathProperty>true</GeneratePathProperty>
      <IncludeAssets>None</IncludeAssets>
      <ExcludeAssets>All</ExcludeAssets>
      <PrivateAssets>None</PrivateAssets>
    </PackageReference>
    <PackageReference Include="System.Memory" version="4.5.4" Condition="'$(TargetFramework)' == 'netstandard2.0'" />
    <Reference Include="System.CommandLine">
      <HintPath>$(PkgSystem_CommandLine)\lib\$(TargetFramework)\System.CommandLine.dll</HintPath>
    </Reference>
    <None Include="$(OutputPath)\$(TargetFramework)\**\System.CommandLine*" Pack="true" PackagePath="lib/$(TargetFramework)" Visible="false" />
    -->
  </ItemGroup>

  <ItemGroup>
    <!-- 
      https://github.com/dotnet/roslyn/issues/55229 
      https://stackoverflow.com/a/69193922
    -->
    <!-- Ensure that the source generator is built together with this project -->
    <ProjectReference Include="..\$(MSBuildProjectName).SourceGeneration\$(MSBuildProjectName).SourceGeneration.csproj">
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
    </ProjectReference>
    <!-- Package the generator in the analyzer directory of the nuget package -->
    <None Include="..\$(MSBuildProjectName).SourceGeneration\$(OutputPath)\netstandard2.0\*.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
    <!--
      Package MSBuild .props file in the nuget package
      https://learn.microsoft.com/en-us/nuget/concepts/msbuild-props-and-targets
    -->
    <None Include="nuget.props" Pack="true" PackagePath="build/$(PackageId).props" Visible="false" />
  </ItemGroup>

  <ItemGroup>
    <None Remove="*.DotSettings" />
  </ItemGroup>

</Project>
