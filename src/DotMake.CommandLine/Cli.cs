using System;
using System.CommandLine;
using System.Threading;
using System.Threading.Tasks;

namespace DotMake.CommandLine
{
    /// <summary>
    /// Provides methods for parsing command line input and running an indicated command.
    /// </summary>
    /// <example>
    ///     <code id="gettingStartedDelegate" source="..\TestApp\CliExamples.cs" region="CliRunDelegate" language="cs" />
    ///     <code id="gettingStartedClass">
    ///         <code source="..\TestApp\Commands\RootCliCommand.cs" region="RootCliCommand" language="cs" />
    ///         <code source="..\TestApp\CliExamples.cs" region="CliRun" language="cs" />
    ///         <code source="..\TestApp\CliExamples.cs" region="CliParse" language="cs" />
    ///     </code>
    ///     <code id="gettingStartedClass2" source="..\TestApp\Commands\RootHelpOnEmptyCliCommand.cs" region="RootHelpOnEmptyCliCommand" language="cs" />
    ///     <code>
    ///         <code source="..\TestApp\CliExamples.cs" region="CliRunWithReturn" language="cs" />
    ///         <code source="..\TestApp\CliExamples.cs" region="CliRunAsync" language="cs" />
    ///         <code source="..\TestApp\CliExamples.cs" region="CliRunAsyncWithReturn" language="cs" />
    ///         <code source="..\TestApp\CliExamples.cs" region="CliParseWithResult" language="cs" />
    ///     </code>
    ///     <code source="..\TestApp\CliExamples.cs" region="CliRunExceptions" language="cs" />
    ///     <code>
    ///         <code source="..\TestApp.NugetDI\Program.cs" region="Namespace" language="cs" />
    ///         <code source="..\TestApp.NugetDI\Program.cs" region="ConfigureServices" language="cs" />
    ///         <code source="..\TestApp.NugetDI\Commands\RootCliCommand.cs" region="RootCliCommand" language="cs" />
    ///     </code>
    /// </example>
    public static class Cli
    {
        /// <summary>
        /// <inheritdoc cref="CliExtensions" path="/summary/node()" />
        /// </summary>
        public static CliExtensions Ext { get; } = new CliExtensions();


        /// <summary>
        /// Gets a CLI parser configured for the indicated command.
        /// </summary>
        /// <typeparam name="TDefinition">The definition class for the command. A command builder for this class should be automatically generated by the source generator.</typeparam>
        /// <param name="settings">The settings for the parser's grammar and behaviors.</param>
        /// <returns>A <see cref="CliParser"/> for the indicated command with grammar and behaviors.</returns>
        public static CliParser GetParser<TDefinition>(CliSettings settings = null)
        {
            var definitionType = typeof(TDefinition);

            return GetParser(definitionType, settings);
        }

        /// <inheritdoc cref="GetParser{TDefinition}" />
        /// <param name="definitionType">The definition class type for the command. A command builder for this class should be automatically generated by the source generator.</param>
        /// <param name="settings"><inheritdoc cref="GetParser{TDefinition}" path="/param[@name='settings']/node()" /></param>
        public static CliParser GetParser(Type definitionType, CliSettings settings = null)
        {
            return new CliParser(definitionType, settings);
        }

        /// <inheritdoc cref="CliParser.GetArgs" />
        public static string[] GetArgs()
        {
            return CliParser.GetArgs();
        }


        /// <inheritdoc cref="CliParser.Parse(string[])" />
        /// <typeparam name="TDefinition"><inheritdoc cref="GetParser{TDefinition}" path="/typeparam[@name='TDefinition']/node()" /></typeparam>
        /// <param name="args"></param>
        /// <param name="settings"><inheritdoc cref="GetParser{TDefinition}" path="/param[@name='settings']/node()" /></param>
        /// <example>
        ///     <code source="..\TestApp\CliExamples.cs" region="CliParseWithResult" language="cs" />
        /// </example>
        public static CliResult Parse<TDefinition>(string[] args = null, CliSettings settings = null)
        {
            var parser = GetParser<TDefinition>(settings);

            return parser.Parse(args);
        }

        /// <inheritdoc cref="CliParser.Parse(string)" />
        /// <typeparam name="TDefinition"><inheritdoc cref="GetParser{TDefinition}" path="/typeparam[@name='TDefinition']/node()" /></typeparam>
        /// <param name="commandLine"></param>
        /// <param name="settings"><inheritdoc cref="GetParser{TDefinition}" path="/param[@name='settings']/node()" /></param>
        /// <example>
        ///     <code source="..\TestApp\CliExamples.cs" region="CliParseStringWithResult" language="cs" />
        /// </example>
        public static CliResult Parse<TDefinition>(string commandLine, CliSettings settings = null)
        {
            var parser = GetParser<TDefinition>(settings);

            return parser.Parse(commandLine);
        }


        /// <inheritdoc cref="CliParser.Run(string[])" />
        /// <typeparam name="TDefinition"><inheritdoc cref="GetParser{TDefinition}" path="/typeparam[@name='TDefinition']/node()" /></typeparam>
        /// <param name="args"></param>
        /// <param name="settings"><inheritdoc cref="GetParser{TDefinition}" path="/param[@name='settings']/node()" /></param>
        /// <example>
        ///     <code source="..\TestApp\CliExamples.cs" region="CliRun" language="cs" />
        ///     <code source="..\TestApp\CliExamples.cs" region="CliRunWithReturn" language="cs" />
        /// </example>
        public static int Run<TDefinition>(string[] args = null, CliSettings settings = null)
        {
            var parser = GetParser<TDefinition>(settings);

            return parser.Run(args);
        }

        /// <inheritdoc cref="CliParser.Run(string)" />
        /// <typeparam name="TDefinition"><inheritdoc cref="GetParser{TDefinition}" path="/typeparam[@name='TDefinition']/node()" /></typeparam>
        /// <param name="commandLine"></param>
        /// <param name="settings"><inheritdoc cref="GetParser{TDefinition}" path="/param[@name='settings']/node()" /></param>
        /// <example>
        ///     <code source="..\TestApp\CliExamples.cs" region="CliRunString" language="cs" />
        ///     <code source="..\TestApp\CliExamples.cs" region="CliRunStringWithReturn" language="cs" />
        /// </example>
        public static int Run<TDefinition>(string commandLine, CliSettings settings = null)
        {
            var parser = GetParser<TDefinition>(settings);

            return parser.Run(commandLine);
        }

        /// <inheritdoc cref="CliParser.RunAsync(string[], CancellationToken)" />
        /// <typeparam name="TDefinition"><inheritdoc cref="GetParser{TDefinition}" path="/typeparam[@name='TDefinition']/node()" /></typeparam>
        /// <param name="args"></param>
        /// <param name="settings"><inheritdoc cref="GetParser{TDefinition}" path="/param[@name='settings']/node()" /></param>
        /// <param name="cancellationToken"></param>
        /// <example>
        ///     <code source="..\TestApp\CliExamples.cs" region="CliRunAsync" language="cs" />
        ///     <code source="..\TestApp\CliExamples.cs" region="CliRunAsyncWithReturn" language="cs" />
        /// </example>
        public static async Task<int> RunAsync<TDefinition>(string[] args = null, CliSettings settings = null, CancellationToken cancellationToken = default)
        {
            var parser = GetParser<TDefinition>(settings);

            return await parser.RunAsync(args, cancellationToken);
        }

        /// <inheritdoc cref="CliParser.RunAsync(string, CancellationToken)" />
        /// <typeparam name="TDefinition"><inheritdoc cref="GetParser{TDefinition}" path="/typeparam[@name='TDefinition']/node()" /></typeparam>
        /// <param name="commandLine"></param>
        /// <param name="settings"><inheritdoc cref="GetParser{TDefinition}" path="/param[@name='settings']/node()" /></param>
        /// <param name="cancellationToken"></param>
        /// <example>
        ///     <code source="..\TestApp\CliExamples.cs" region="CliRunAsyncString" language="cs" />
        ///     <code source="..\TestApp\CliExamples.cs" region="CliRunAsyncStringWithReturn" language="cs" />
        /// </example>
        public static async Task<int> RunAsync<TDefinition>(string commandLine, CliSettings settings = null, CancellationToken cancellationToken = default)
        {
            var parser = GetParser<TDefinition>(settings);

            return await parser.RunAsync(commandLine, cancellationToken);
        }

        
        /// <summary>
        /// Parses the command line arguments and runs the indicated command as delegate.
        /// </summary>
        /// <param name="cliCommandAsDelegate">
        /// The command as delegate.
        /// <code>
        /// ([CliArgument] string argument1, bool option1) => { }
        ///
        /// ([CliArgument] string argument1, bool option1) => { return 0; }
        ///
        /// async ([CliArgument] string argument1, bool option1) => { await Task.Delay(1000); }
        /// 
        /// MethodReference
        /// </code>
        /// </param>
        /// <param name="settings"><inheritdoc cref="GetParser{TDefinition}" path="/param[@name='settings']/node()" /></param>
        /// <returns><inheritdoc cref="Run{TDefinition}(string[], CliSettings)" path="/returns/node()" /></returns>
        /// <example>
        ///     <code source="..\TestApp\CliExamples.cs" region="CliRunDelegate" language="cs" />
        ///     <code source="..\TestApp\CliExamples.cs" region="CliRunDelegateWithReturn" language="cs" />
        /// </example>
        public static int Run(Delegate cliCommandAsDelegate, CliSettings settings = null)
        {
            var definitionType = CliCommandAsDelegate.Get(cliCommandAsDelegate);
            var parser = GetParser(definitionType, settings);

            return parser.Run();
        }
        
        /// <summary>
        /// Parses the command line arguments and runs the indicated command as delegate.
        /// </summary>
        /// <param name="cliCommandAsDelegate"><inheritdoc cref="Run(Delegate, CliSettings)" path="/param[@name='cliCommandAsDelegate']/node()" /></param>
        /// <param name="settings"><inheritdoc cref="GetParser{TDefinition}" path="/param[@name='settings']/node()" /></param>
        /// <param name="cancellationToken"><inheritdoc cref="RunAsync{TDefinition}(string[], CliSettings, CancellationToken)" path="/param[@name='cancellationToken']/node()" /></param>
        /// <returns><inheritdoc cref="Run{TDefinition}(string[], CliSettings)" path="/returns/node()" /></returns>
        /// <example>
        ///     <code source="..\TestApp\CliExamples.cs" region="CliRunAsyncDelegate" language="cs" />
        ///     <code source="..\TestApp\CliExamples.cs" region="CliRunAsyncDelegateWithReturn" language="cs" />
        /// </example>
        public static async Task<int> RunAsync(Delegate cliCommandAsDelegate, CliSettings settings = null, CancellationToken cancellationToken = default)
        {
            var definitionType = CliCommandAsDelegate.Get(cliCommandAsDelegate);
            var parser = GetParser(definitionType, settings);

            return await parser.RunAsync(cancellationToken: cancellationToken);
        }
    }
}
