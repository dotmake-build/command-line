// <auto-generated />
// Generated by DotMake.CommandLine.SourceGeneration v1.9.0.0
// Roslyn (Microsoft.CodeAnalysis) v4.1200.24.55805
// Generation: 4

namespace TestApp.Commands.GeneratedCode
{
    /// <inheritdoc />
    public class ParentCommandAccessorCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
    {
        /// <inheritdoc />
        public ParentCommandAccessorCliCommandBuilder()
        {
            DefinitionType = typeof(TestApp.Commands.ParentCommandAccessorCliCommand);
            ParentDefinitionType = null;
            NameCasingConvention = DotMake.CommandLine.CliNameCasingConvention.KebabCase;
            NamePrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.DoubleHyphen;
            ShortFormPrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.SingleHyphen;
            ShortFormAutoGenerate = true;
        }

        private TestApp.Commands.ParentCommandAccessorCliCommand CreateInstance()
        {
            return new TestApp.Commands.ParentCommandAccessorCliCommand();
        }

        /// <inheritdoc />
        public override System.CommandLine.Command Build()
        {
            // Command for 'ParentCommandAccessorCliCommand' class
            var rootCommand = new System.CommandLine.RootCommand()
            {
                Description = "A root cli command with children that can access parent commands",
            };

            var defaultClass = CreateInstance();

            // Option for 'GlobalOption1' property
            var option0 = new System.CommandLine.Option<string>
            (
                "--global-option-1"
            )
            {
                Recursive = true,
                Description = "This is a global option (Recursive option on the root command), it can appear anywhere on the command line",
                Required = false,
                DefaultValueFactory = _ => defaultClass.GlobalOption1,
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            option0.Aliases.Add("-g");
            rootCommand.Add(option0);

            // Argument for 'RootArgument1' property
            var argument0 = new System.CommandLine.Argument<string>
            (
                "root-argument-1"
            )
            {
                Description = "Description for RootArgument1",
                CustomParser = GetArgumentParser<string>
                (
                    null
                ),
            };
            rootCommand.Add(argument0);

            // Add nested or external registered children
            foreach (var child in Children)
            {
                rootCommand.Add(child.Build());
            }

            Binder = (parseResult) =>
            {
                var targetClass = CreateInstance();

                //  Set the parsed or default values for the options
                targetClass.GlobalOption1 = GetValueForOption(parseResult, option0);

                //  Set the parsed or default values for the arguments
                targetClass.RootArgument1 = GetValueForArgument(parseResult, argument0);

                //  Set the values for the parent command accessors

                return targetClass;
            };

            rootCommand.SetAction(parseResult =>
            {
                var targetClass = (TestApp.Commands.ParentCommandAccessorCliCommand) Bind(parseResult);

                //  Call the command handler
                var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                var exitCode = 0;
                targetClass.Run(cliContext);
                return exitCode;
            });

            return rootCommand;
        }

        [System.Runtime.CompilerServices.ModuleInitializerAttribute]
        internal static void Initialize()
        {
            var commandBuilder = new TestApp.Commands.GeneratedCode.ParentCommandAccessorCliCommandBuilder();

            // Register this command builder so that it can be found by the definition class
            // and it can be found by the parent definition class if it's a nested/external child.
            commandBuilder.Register();
        }

        /// <inheritdoc />
        public class Level1SubCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
        {
            /// <inheritdoc />
            public Level1SubCliCommandBuilder()
            {
                DefinitionType = typeof(TestApp.Commands.ParentCommandAccessorCliCommand.Level1SubCliCommand);
                ParentDefinitionType = typeof(TestApp.Commands.ParentCommandAccessorCliCommand);
                NameCasingConvention = DotMake.CommandLine.CliNameCasingConvention.KebabCase;
                NamePrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.DoubleHyphen;
                ShortFormPrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.SingleHyphen;
                ShortFormAutoGenerate = true;
            }

            private TestApp.Commands.ParentCommandAccessorCliCommand.Level1SubCliCommand CreateInstance()
            {
                return new TestApp.Commands.ParentCommandAccessorCliCommand.Level1SubCliCommand();
            }

            /// <inheritdoc />
            public override System.CommandLine.Command Build()
            {
                // Command for 'Level1SubCliCommand' class
                var command = new System.CommandLine.Command("level-1")
                {
                    Description = "A nested level 1 sub-command which accesses the root command",
                };

                var defaultClass = CreateInstance();

                // Option for 'Level1RecursiveOption1' property
                var option0 = new System.CommandLine.Option<string>
                (
                    "--level-1-recursive-option-1"
                )
                {
                    Recursive = true,
                    Description = "This is global for all sub commands (it can appear anywhere after the level-1 verb)",
                    Required = false,
                    DefaultValueFactory = _ => defaultClass.Level1RecursiveOption1,
                    CustomParser = GetArgumentParser<string>
                    (
                        null
                    ),
                };
                option0.Aliases.Add("-l");
                command.Add(option0);

                // Argument for 'Argument1' property
                var argument0 = new System.CommandLine.Argument<string>
                (
                    "argument-1"
                )
                {
                    Description = "Description for Argument1",
                    CustomParser = GetArgumentParser<string>
                    (
                        null
                    ),
                };
                command.Add(argument0);

                // Add nested or external registered children
                foreach (var child in Children)
                {
                    command.Add(child.Build());
                }

                Binder = (parseResult) =>
                {
                    var targetClass = CreateInstance();

                    //  Set the parsed or default values for the options
                    targetClass.Level1RecursiveOption1 = GetValueForOption(parseResult, option0);

                    //  Set the parsed or default values for the arguments
                    targetClass.Argument1 = GetValueForArgument(parseResult, argument0);

                    //  Set the values for the parent command accessors
                    targetClass.RootCommand = DotMake.CommandLine.ParseResultExtensions
                        .Bind<TestApp.Commands.ParentCommandAccessorCliCommand>(parseResult);

                    return targetClass;
                };

                command.SetAction(parseResult =>
                {
                    var targetClass = (TestApp.Commands.ParentCommandAccessorCliCommand.Level1SubCliCommand) Bind(parseResult);

                    //  Call the command handler
                    var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                    var exitCode = 0;
                    targetClass.Run(cliContext);
                    return exitCode;
                });

                return command;
            }

            [System.Runtime.CompilerServices.ModuleInitializerAttribute]
            internal static void Initialize()
            {
                var commandBuilder = new TestApp.Commands.GeneratedCode.ParentCommandAccessorCliCommandBuilder.Level1SubCliCommandBuilder();

                // Register this command builder so that it can be found by the definition class
                // and it can be found by the parent definition class if it's a nested/external child.
                commandBuilder.Register();
            }

            /// <inheritdoc />
            public class Level2SubCliCommandBuilder : DotMake.CommandLine.CliCommandBuilder
            {
                /// <inheritdoc />
                public Level2SubCliCommandBuilder()
                {
                    DefinitionType = typeof(TestApp.Commands.ParentCommandAccessorCliCommand.Level1SubCliCommand.Level2SubCliCommand);
                    ParentDefinitionType = typeof(TestApp.Commands.ParentCommandAccessorCliCommand.Level1SubCliCommand);
                    NameCasingConvention = DotMake.CommandLine.CliNameCasingConvention.KebabCase;
                    NamePrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.DoubleHyphen;
                    ShortFormPrefixConvention = DotMake.CommandLine.CliNamePrefixConvention.SingleHyphen;
                    ShortFormAutoGenerate = true;
                }

                private TestApp.Commands.ParentCommandAccessorCliCommand.Level1SubCliCommand.Level2SubCliCommand CreateInstance()
                {
                    return new TestApp.Commands.ParentCommandAccessorCliCommand.Level1SubCliCommand.Level2SubCliCommand();
                }

                /// <inheritdoc />
                public override System.CommandLine.Command Build()
                {
                    // Command for 'Level2SubCliCommand' class
                    var command = new System.CommandLine.Command("level-2")
                    {
                        Description = "A nested level 2 sub-command which accesses its parent commands",
                    };

                    var defaultClass = CreateInstance();

                    // Option for 'Option1' property
                    var option0 = new System.CommandLine.Option<string>
                    (
                        "--option-1"
                    )
                    {
                        Description = "Description for Option1",
                        Required = false,
                        DefaultValueFactory = _ => defaultClass.Option1,
                        CustomParser = GetArgumentParser<string>
                        (
                            null
                        ),
                    };
                    option0.Aliases.Add("-o");
                    command.Add(option0);

                    // Argument for 'Argument1' property
                    var argument0 = new System.CommandLine.Argument<string>
                    (
                        "argument-1"
                    )
                    {
                        Description = "Description for Argument1",
                        CustomParser = GetArgumentParser<string>
                        (
                            null
                        ),
                    };
                    command.Add(argument0);

                    // Add nested or external registered children
                    foreach (var child in Children)
                    {
                        command.Add(child.Build());
                    }

                    Binder = (parseResult) =>
                    {
                        var targetClass = CreateInstance();

                        //  Set the parsed or default values for the options
                        targetClass.Option1 = GetValueForOption(parseResult, option0);

                        //  Set the parsed or default values for the arguments
                        targetClass.Argument1 = GetValueForArgument(parseResult, argument0);

                        //  Set the values for the parent command accessors
                        targetClass.RootCommand = DotMake.CommandLine.ParseResultExtensions
                            .Bind<TestApp.Commands.ParentCommandAccessorCliCommand>(parseResult);
                        targetClass.ParentCommand = DotMake.CommandLine.ParseResultExtensions
                            .Bind<TestApp.Commands.ParentCommandAccessorCliCommand.Level1SubCliCommand>(parseResult);

                        return targetClass;
                    };

                    command.SetAction(parseResult =>
                    {
                        var targetClass = (TestApp.Commands.ParentCommandAccessorCliCommand.Level1SubCliCommand.Level2SubCliCommand) Bind(parseResult);

                        //  Call the command handler
                        var cliContext = new DotMake.CommandLine.CliContext(parseResult);
                        var exitCode = 0;
                        targetClass.Run(cliContext);
                        return exitCode;
                    });

                    return command;
                }

                [System.Runtime.CompilerServices.ModuleInitializerAttribute]
                internal static void Initialize()
                {
                    var commandBuilder = new TestApp.Commands.GeneratedCode.ParentCommandAccessorCliCommandBuilder.Level1SubCliCommandBuilder.Level2SubCliCommandBuilder();

                    // Register this command builder so that it can be found by the definition class
                    // and it can be found by the parent definition class if it's a nested/external child.
                    commandBuilder.Register();
                }
            }
        }
    }
}
