<Project>

  <PropertyGroup>
    <!-- AssemblyTitle needs to be set in .targets which is imported after .csproj -->
    <AssemblyTitle Condition="'$(OutputType)' != 'Exe'">$(AssemblyName) ($(TargetFramework))</AssemblyTitle>
  </PropertyGroup>

  <!--
    We don't want SourceRevisionId appended to InformationalVersion mainly because shfb uses this attribute in assembly 
    for api docs (which is ugly) so we save SourceRevisionId as AssemblyMetadata instead.
    By the way using the default way below, does not work because it disables sourcelink all together? 
    <IncludeSourceRevisionInInformationalVersion>false</IncludeSourceRevisionInInformationalVersion>
    SourceRevisionId comes empty in that case.
    -->
  <Target Name="SetCustomAssemblyMetadata" AfterTargets="InitializeSourceControlInformation" BeforeTargets="GetAssemblyAttributes">
    <ItemGroup>
      <AssemblyMetadata Include="RepositoryCommit" Value="$(SourceRevisionId)" />
    </ItemGroup>
    <PropertyGroup>
      <!--Reset it to the original value -->
      <InformationalVersion>$(Version)</InformationalVersion>
    </PropertyGroup>
  </Target>
  
  <!-- 
    EmitCompilerGeneratedFiles is useful for debugging, it doesn't work for live editing (VS continues to run the cached 
    source generator, needs restart as it uses VBCSCompiler.exe for Roslyn analyzers/generators) but when project is 
    explicitly built (probably VS runs msbuild externally in that case), the latest source generator DLL is used to 
    generate files (the in-memory generated files in VS Analyzers node is still not updated but at least we have files on disk).
    CompilerGeneratedFilesOutputPath defaults to obj\Debug\net6.0\generated but we set a folder inside project to easily
    examine the files, however we exclude the files from Compile below (and add to None) to prevent class conflict errors.
    We also use PreCleanCompilerGeneratedFiles target below to clean all generated files before build so that we don't have 
    outdated files (e.g. for renamed classes).
  -->
  <PropertyGroup>
    <CompilerGeneratedFilesBasePath>GeneratedFiles</CompilerGeneratedFilesBasePath>
    <CompilerGeneratedFilesOutputPath Condition="'$(EmitCompilerGeneratedFiles)' == 'true' AND '$(TargetFramework)' != ''">$(CompilerGeneratedFilesBasePath)\$(TargetFramework)</CompilerGeneratedFilesOutputPath>
  </PropertyGroup>
  <ItemGroup Condition="'$(EmitCompilerGeneratedFiles)' == 'true'">
    <Compile Remove="$(CompilerGeneratedFilesBasePath)\**\*.cs" />
    <None Include="$(CompilerGeneratedFilesBasePath)\**\*.cs" />
  </ItemGroup>
  <!--
  As there is no easy way to hook before CoreCompile (actual run), this is not useful.
  When compile is skipped, this will still run, and we lose previously generated files.
  So just delete generated files on Clean target for now.
  There is TargetsTriggeredByCompilation which is run after only if CoreCompile was triggered,
  but there is no TargetsTriggeredBeforeCompilation which is run before:
  https://github.com/dotnet/roslyn/issues/24053
  
  <Target Name="PreCleanCompilerGeneratedFiles" BeforeTargets="CreateCompilerGeneratedFilesOutputPath"
          Condition="'$(EmitCompilerGeneratedFiles)' == 'true' AND '$(TargetFramework)' != '' AND '$(BuildingProject)' == 'true'">
    <RemoveDir Directories="$(CompilerGeneratedFilesOutputPath)" />
  </Target>
  -->
  <Target Name="CleanCompilerGeneratedFiles" AfterTargets="Clean"
          Condition="'$(EmitCompilerGeneratedFiles)' == 'true' AND '$(TargetFramework)' != ''">
    <RemoveDir Directories="$(CompilerGeneratedFilesOutputPath)" />
  </Target>

  <!--
    A useful target for deleting the package with the same version in local or global Nuget cache before creating a new one.
    So that when you rebuild a project that depends on this package, Nuget will be forced to re-cache the new package
    and use that even if the version was not changed.
  -->
  <Target Name="DeleteLocalOrGlobalNugetPackage" BeforeTargets="Pack"
          Condition="'$(NugetPackageRoot)' != ''">
    <RemoveDir Directories="$(NugetPackageRoot)/$(PackageId.ToLowerInvariant())/$(Version)"/>
  </Target>
</Project>
